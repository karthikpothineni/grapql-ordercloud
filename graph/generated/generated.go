// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"mpmy-product-service/graph/model"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CategoryItems struct {
		Active      func(childComplexity int) int
		ChildCount  func(childComplexity int) int
		ChildData   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		ListOrder   func(childComplexity int) int
		Name        func(childComplexity int) int
		ParentID    func(childComplexity int) int
		Xp          func(childComplexity int) int
	}

	CategoryMeta struct {
		ItemRange   func(childComplexity int) int
		NextPageKey func(childComplexity int) int
		Page        func(childComplexity int) int
		PageSize    func(childComplexity int) int
		TotalCount  func(childComplexity int) int
		TotalPages  func(childComplexity int) int
	}

	CategoryResponse struct {
		Items func(childComplexity int) int
		Meta  func(childComplexity int) int
	}

	Draft struct {
		ID              func(childComplexity int) int
		RejectionReason func(childComplexity int) int
		Status          func(childComplexity int) int
	}

	GetBuySku struct {
		Qty func(childComplexity int) int
		Sku func(childComplexity int) int
	}

	Inventory struct {
		Enabled              func(childComplexity int) int
		LastUpdated          func(childComplexity int) int
		NotificationPoint    func(childComplexity int) int
		OrderCanExceed       func(childComplexity int) int
		QuantityAvailable    func(childComplexity int) int
		VariantLevelTracking func(childComplexity int) int
	}

	LatestProductItems struct {
		Draft         func(childComplexity int) int
		ID            func(childComplexity int) int
		PriceSchedule func(childComplexity int) int
		Product       func(childComplexity int) int
		Specs         func(childComplexity int) int
		Variants      func(childComplexity int) int
	}

	Mutation struct {
		FavoriteProduct func(childComplexity int, productID string, isFavorite bool) int
	}

	NewProductPriceSchedule struct {
		ApplyShipping         func(childComplexity int) int
		ApplyTax              func(childComplexity int) int
		Currency              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsOnSale              func(childComplexity int) int
		MaxQuantity           func(childComplexity int) int
		MinQuantity           func(childComplexity int) int
		Name                  func(childComplexity int) int
		OwnerID               func(childComplexity int) int
		PriceBreaks           func(childComplexity int) int
		RestrictedQuantity    func(childComplexity int) int
		SaleEnd               func(childComplexity int) int
		SaleStart             func(childComplexity int) int
		UseCumulativeQuantity func(childComplexity int) int
	}

	OrderCloudMeta struct {
		ItemRange   func(childComplexity int) int
		NextPageKey func(childComplexity int) int
		Page        func(childComplexity int) int
		PageSize    func(childComplexity int) int
		TotalCount  func(childComplexity int) int
		TotalPages  func(childComplexity int) int
	}

	PriceBreak struct {
		Price     func(childComplexity int) int
		Quantity  func(childComplexity int) int
		SalePrice func(childComplexity int) int
	}

	PriceScheduleItem struct {
		ApplyShipping         func(childComplexity int) int
		ApplyTax              func(childComplexity int) int
		Currency              func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsOnSale              func(childComplexity int) int
		MaxQuantity           func(childComplexity int) int
		MinQuantity           func(childComplexity int) int
		Name                  func(childComplexity int) int
		OwnerID               func(childComplexity int) int
		PriceBreaks           func(childComplexity int) int
		RestrictedQuantity    func(childComplexity int) int
		SaleEnd               func(childComplexity int) int
		SaleStart             func(childComplexity int) int
		UseCumulativeQuantity func(childComplexity int) int
		Xp                    func(childComplexity int) int
	}

	PriceScheduleResponse struct {
		Items func(childComplexity int) int
		Meta  func(childComplexity int) int
	}

	PriceScheduleXP struct {
		Type func(childComplexity int) int
	}

	ProductBatch struct {
		BatchExpirationDate func(childComplexity int) int
		BatchNumber         func(childComplexity int) int
		BatchStockQuantity  func(childComplexity int) int
	}

	ProductDocument struct {
		FileName func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	ProductFacet struct {
		Supplier func(childComplexity int) int
	}

	ProductFilter struct {
		FilterCount func(childComplexity int) int
		FilterKey   func(childComplexity int) int
	}

	ProductImage struct {
		Tags         func(childComplexity int) int
		ThumbnailURL func(childComplexity int) int
		URL          func(childComplexity int) int
	}

	ProductItem struct {
		Active                 func(childComplexity int) int
		AllSuppliersCanSell    func(childComplexity int) int
		AutoForward            func(childComplexity int) int
		DefaultPriceScheduleID func(childComplexity int) int
		DefaultSupplierID      func(childComplexity int) int
		Description            func(childComplexity int) int
		ID                     func(childComplexity int) int
		Inventory              func(childComplexity int) int
		IsFavorite             func(childComplexity int) int
		Name                   func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		PriceSchedule          func(childComplexity int) int
		QuantityMultiplier     func(childComplexity int) int
		Returnable             func(childComplexity int) int
		ShipFromAddressID      func(childComplexity int) int
		ShipHeight             func(childComplexity int) int
		ShipLength             func(childComplexity int) int
		ShipWeight             func(childComplexity int) int
		ShipWidth              func(childComplexity int) int
		SpecCount              func(childComplexity int) int
		VariantCount           func(childComplexity int) int
		Xp                     func(childComplexity int) int
	}

	ProductMeta struct {
		Facets      func(childComplexity int) int
		ItemRange   func(childComplexity int) int
		NextPageKey func(childComplexity int) int
		Page        func(childComplexity int) int
		PageSize    func(childComplexity int) int
		TotalCount  func(childComplexity int) int
		TotalPages  func(childComplexity int) int
	}

	ProductPromotions struct {
		AllowAllBuyers         func(childComplexity int) int
		CanCombine             func(childComplexity int) int
		Code                   func(childComplexity int) int
		Description            func(childComplexity int) int
		EligibleExpression     func(childComplexity int) int
		ExpirationDate         func(childComplexity int) int
		FinePrint              func(childComplexity int) int
		ID                     func(childComplexity int) int
		LineItemLevel          func(childComplexity int) int
		Name                   func(childComplexity int) int
		OwnerID                func(childComplexity int) int
		RedemptionCount        func(childComplexity int) int
		RedemptionLimit        func(childComplexity int) int
		RedemptionLimitPerUser func(childComplexity int) int
		StartDate              func(childComplexity int) int
		ValueExpression        func(childComplexity int) int
		Xp                     func(childComplexity int) int
	}

	ProductPromotionsXp struct {
		AppliesTo       func(childComplexity int) int
		Automatic       func(childComplexity int) int
		Bogo            func(childComplexity int) int
		Buyers          func(childComplexity int) int
		MaxShipCost     func(childComplexity int) int
		MinReq          func(childComplexity int) int
		SKUs            func(childComplexity int) int
		ScopeToSupplier func(childComplexity int) int
		Supplier        func(childComplexity int) int
		Type            func(childComplexity int) int
		Value           func(childComplexity int) int
	}

	ProductPromotionsXpBogo struct {
		BuySku func(childComplexity int) int
		GetSku func(childComplexity int) int
		Type   func(childComplexity int) int
		Value  func(childComplexity int) int
	}

	ProductPromotionsXpMinReq struct {
		Int  func(childComplexity int) int
		Type func(childComplexity int) int
	}

	ProductResponse struct {
		Items func(childComplexity int) int
		Meta  func(childComplexity int) int
	}

	ProductResponseV2 struct {
		Items func(childComplexity int) int
		Meta  func(childComplexity int) int
	}

	ProductTax struct {
		Code            func(childComplexity int) int
		Description     func(childComplexity int) int
		LongDescription func(childComplexity int) int
	}

	ProductXP struct {
		Accessorials              func(childComplexity int) int
		ArtworkRequired           func(childComplexity int) int
		Brand                     func(childComplexity int) int
		Company                   func(childComplexity int) int
		CountryOfOrigin           func(childComplexity int) int
		Currency                  func(childComplexity int) int
		CustomerRating            func(childComplexity int) int
		Documents                 func(childComplexity int) int
		Facets                    func(childComplexity int) int
		FreeShipping              func(childComplexity int) int
		FreeShippingMessage       func(childComplexity int) int
		HasVariants               func(childComplexity int) int
		Images                    func(childComplexity int) int
		IntegrationData           func(childComplexity int) int
		IsResale                  func(childComplexity int) int
		Manufacturer              func(childComplexity int) int
		Notes                     func(childComplexity int) int
		ProductBatch              func(childComplexity int) int
		ProductRegistrationNumber func(childComplexity int) int
		ProductType               func(childComplexity int) int
		PromotionEligible         func(childComplexity int) int
		PromotionExists           func(childComplexity int) int
		Promotions                func(childComplexity int) int
		SizeTier                  func(childComplexity int) int
		Status                    func(childComplexity int) int
		SupplierImage             func(childComplexity int) int
		Tax                       func(childComplexity int) int
		TherapeuticClass          func(childComplexity int) int
		UnitOfMeasure             func(childComplexity int) int
		Workflow                  func(childComplexity int) int
	}

	Query struct {
		Categories         func(childComplexity int, catalogID *string, depth *string) int
		GetProductFilter   func(childComplexity int, search string) int
		PriceSchedules     func(childComplexity int, productID string, page *string, pageSize *string) int
		Product            func(childComplexity int, id string) int
		ProductV2          func(childComplexity int, id string) int
		Products           func(childComplexity int, catalogID *string, categoryID *string, supplierID *string, isFavorite *bool, search *string, page *string, pageSize *string, sortBy *string, extraFilters map[string]interface{}) int
		ProductsV2         func(childComplexity int, catalogID *string, categoryID *string, supplierID *string, isFavorite *bool, search *string, page *string, pageSize *string, sortBy *string, extraFilters map[string]interface{}) int
		RecentSearches     func(childComplexity int, page *string, pageSize *string) int
		RecommendProducts  func(childComplexity int, productID string, page *string, pageSize *string) int
		SimilarProducts    func(childComplexity int, productID string, page *string, pageSize *string) int
		TrendingProducts   func(childComplexity int) int
		__resolve__service func(childComplexity int) int
	}

	RecentSearch struct {
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		SearchKeyword func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	TrendingProduct struct {
		OrderCount func(childComplexity int) int
		ProductID  func(childComplexity int) int
		Quantity   func(childComplexity int) int
	}

	UnitOfMeasure struct {
		Qty  func(childComplexity int) int
		Unit func(childComplexity int) int
	}

	UserProductFavorite struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		ProductID func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	Workflow struct {
		RejectionReasons func(childComplexity int) int
	}

	_Service struct {
		SDL func(childComplexity int) int
	}
}

type MutationResolver interface {
	FavoriteProduct(ctx context.Context, productID string, isFavorite bool) (*model.UserProductFavorite, error)
}
type QueryResolver interface {
	ProductsV2(ctx context.Context, catalogID *string, categoryID *string, supplierID *string, isFavorite *bool, search *string, page *string, pageSize *string, sortBy *string, extraFilters map[string]interface{}) (*model.ProductResponseV2, error)
	Products(ctx context.Context, catalogID *string, categoryID *string, supplierID *string, isFavorite *bool, search *string, page *string, pageSize *string, sortBy *string, extraFilters map[string]interface{}) (*model.ProductResponse, error)
	SimilarProducts(ctx context.Context, productID string, page *string, pageSize *string) (*model.ProductResponse, error)
	RecommendProducts(ctx context.Context, productID string, page *string, pageSize *string) (*model.ProductResponseV2, error)
	Product(ctx context.Context, id string) (*model.ProductItem, error)
	ProductV2(ctx context.Context, id string) (*model.LatestProductItems, error)
	PriceSchedules(ctx context.Context, productID string, page *string, pageSize *string) (*model.PriceScheduleResponse, error)
	Categories(ctx context.Context, catalogID *string, depth *string) (*model.CategoryResponse, error)
	TrendingProducts(ctx context.Context) (*model.ProductResponse, error)
	GetProductFilter(ctx context.Context, search string) ([]*model.ProductFilter, error)
	RecentSearches(ctx context.Context, page *string, pageSize *string) ([]*model.RecentSearch, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "CategoryItems.Active":
		if e.complexity.CategoryItems.Active == nil {
			break
		}

		return e.complexity.CategoryItems.Active(childComplexity), true

	case "CategoryItems.ChildCount":
		if e.complexity.CategoryItems.ChildCount == nil {
			break
		}

		return e.complexity.CategoryItems.ChildCount(childComplexity), true

	case "CategoryItems.ChildData":
		if e.complexity.CategoryItems.ChildData == nil {
			break
		}

		return e.complexity.CategoryItems.ChildData(childComplexity), true

	case "CategoryItems.Description":
		if e.complexity.CategoryItems.Description == nil {
			break
		}

		return e.complexity.CategoryItems.Description(childComplexity), true

	case "CategoryItems.ID":
		if e.complexity.CategoryItems.ID == nil {
			break
		}

		return e.complexity.CategoryItems.ID(childComplexity), true

	case "CategoryItems.ListOrder":
		if e.complexity.CategoryItems.ListOrder == nil {
			break
		}

		return e.complexity.CategoryItems.ListOrder(childComplexity), true

	case "CategoryItems.Name":
		if e.complexity.CategoryItems.Name == nil {
			break
		}

		return e.complexity.CategoryItems.Name(childComplexity), true

	case "CategoryItems.ParentID":
		if e.complexity.CategoryItems.ParentID == nil {
			break
		}

		return e.complexity.CategoryItems.ParentID(childComplexity), true

	case "CategoryItems.Xp":
		if e.complexity.CategoryItems.Xp == nil {
			break
		}

		return e.complexity.CategoryItems.Xp(childComplexity), true

	case "CategoryMeta.ItemRange":
		if e.complexity.CategoryMeta.ItemRange == nil {
			break
		}

		return e.complexity.CategoryMeta.ItemRange(childComplexity), true

	case "CategoryMeta.NextPageKey":
		if e.complexity.CategoryMeta.NextPageKey == nil {
			break
		}

		return e.complexity.CategoryMeta.NextPageKey(childComplexity), true

	case "CategoryMeta.Page":
		if e.complexity.CategoryMeta.Page == nil {
			break
		}

		return e.complexity.CategoryMeta.Page(childComplexity), true

	case "CategoryMeta.PageSize":
		if e.complexity.CategoryMeta.PageSize == nil {
			break
		}

		return e.complexity.CategoryMeta.PageSize(childComplexity), true

	case "CategoryMeta.TotalCount":
		if e.complexity.CategoryMeta.TotalCount == nil {
			break
		}

		return e.complexity.CategoryMeta.TotalCount(childComplexity), true

	case "CategoryMeta.TotalPages":
		if e.complexity.CategoryMeta.TotalPages == nil {
			break
		}

		return e.complexity.CategoryMeta.TotalPages(childComplexity), true

	case "CategoryResponse.Items":
		if e.complexity.CategoryResponse.Items == nil {
			break
		}

		return e.complexity.CategoryResponse.Items(childComplexity), true

	case "CategoryResponse.Meta":
		if e.complexity.CategoryResponse.Meta == nil {
			break
		}

		return e.complexity.CategoryResponse.Meta(childComplexity), true

	case "Draft.ID":
		if e.complexity.Draft.ID == nil {
			break
		}

		return e.complexity.Draft.ID(childComplexity), true

	case "Draft.RejectionReason":
		if e.complexity.Draft.RejectionReason == nil {
			break
		}

		return e.complexity.Draft.RejectionReason(childComplexity), true

	case "Draft.Status":
		if e.complexity.Draft.Status == nil {
			break
		}

		return e.complexity.Draft.Status(childComplexity), true

	case "GetBuySku.Qty":
		if e.complexity.GetBuySku.Qty == nil {
			break
		}

		return e.complexity.GetBuySku.Qty(childComplexity), true

	case "GetBuySku.SKU":
		if e.complexity.GetBuySku.Sku == nil {
			break
		}

		return e.complexity.GetBuySku.Sku(childComplexity), true

	case "Inventory.Enabled":
		if e.complexity.Inventory.Enabled == nil {
			break
		}

		return e.complexity.Inventory.Enabled(childComplexity), true

	case "Inventory.LastUpdated":
		if e.complexity.Inventory.LastUpdated == nil {
			break
		}

		return e.complexity.Inventory.LastUpdated(childComplexity), true

	case "Inventory.NotificationPoint":
		if e.complexity.Inventory.NotificationPoint == nil {
			break
		}

		return e.complexity.Inventory.NotificationPoint(childComplexity), true

	case "Inventory.OrderCanExceed":
		if e.complexity.Inventory.OrderCanExceed == nil {
			break
		}

		return e.complexity.Inventory.OrderCanExceed(childComplexity), true

	case "Inventory.QuantityAvailable":
		if e.complexity.Inventory.QuantityAvailable == nil {
			break
		}

		return e.complexity.Inventory.QuantityAvailable(childComplexity), true

	case "Inventory.VariantLevelTracking":
		if e.complexity.Inventory.VariantLevelTracking == nil {
			break
		}

		return e.complexity.Inventory.VariantLevelTracking(childComplexity), true

	case "LatestProductItems.Draft":
		if e.complexity.LatestProductItems.Draft == nil {
			break
		}

		return e.complexity.LatestProductItems.Draft(childComplexity), true

	case "LatestProductItems.Id":
		if e.complexity.LatestProductItems.ID == nil {
			break
		}

		return e.complexity.LatestProductItems.ID(childComplexity), true

	case "LatestProductItems.PriceSchedule":
		if e.complexity.LatestProductItems.PriceSchedule == nil {
			break
		}

		return e.complexity.LatestProductItems.PriceSchedule(childComplexity), true

	case "LatestProductItems.Product":
		if e.complexity.LatestProductItems.Product == nil {
			break
		}

		return e.complexity.LatestProductItems.Product(childComplexity), true

	case "LatestProductItems.Specs":
		if e.complexity.LatestProductItems.Specs == nil {
			break
		}

		return e.complexity.LatestProductItems.Specs(childComplexity), true

	case "LatestProductItems.Variants":
		if e.complexity.LatestProductItems.Variants == nil {
			break
		}

		return e.complexity.LatestProductItems.Variants(childComplexity), true

	case "Mutation.favoriteProduct":
		if e.complexity.Mutation.FavoriteProduct == nil {
			break
		}

		args, err := ec.field_Mutation_favoriteProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.FavoriteProduct(childComplexity, args["productID"].(string), args["isFavorite"].(bool)), true

	case "NewProductPriceSchedule.ApplyShipping":
		if e.complexity.NewProductPriceSchedule.ApplyShipping == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.ApplyShipping(childComplexity), true

	case "NewProductPriceSchedule.ApplyTax":
		if e.complexity.NewProductPriceSchedule.ApplyTax == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.ApplyTax(childComplexity), true

	case "NewProductPriceSchedule.Currency":
		if e.complexity.NewProductPriceSchedule.Currency == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.Currency(childComplexity), true

	case "NewProductPriceSchedule.ID":
		if e.complexity.NewProductPriceSchedule.ID == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.ID(childComplexity), true

	case "NewProductPriceSchedule.IsOnSale":
		if e.complexity.NewProductPriceSchedule.IsOnSale == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.IsOnSale(childComplexity), true

	case "NewProductPriceSchedule.MaxQuantity":
		if e.complexity.NewProductPriceSchedule.MaxQuantity == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.MaxQuantity(childComplexity), true

	case "NewProductPriceSchedule.MinQuantity":
		if e.complexity.NewProductPriceSchedule.MinQuantity == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.MinQuantity(childComplexity), true

	case "NewProductPriceSchedule.Name":
		if e.complexity.NewProductPriceSchedule.Name == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.Name(childComplexity), true

	case "NewProductPriceSchedule.OwnerID":
		if e.complexity.NewProductPriceSchedule.OwnerID == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.OwnerID(childComplexity), true

	case "NewProductPriceSchedule.PriceBreaks":
		if e.complexity.NewProductPriceSchedule.PriceBreaks == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.PriceBreaks(childComplexity), true

	case "NewProductPriceSchedule.RestrictedQuantity":
		if e.complexity.NewProductPriceSchedule.RestrictedQuantity == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.RestrictedQuantity(childComplexity), true

	case "NewProductPriceSchedule.SaleEnd":
		if e.complexity.NewProductPriceSchedule.SaleEnd == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.SaleEnd(childComplexity), true

	case "NewProductPriceSchedule.SaleStart":
		if e.complexity.NewProductPriceSchedule.SaleStart == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.SaleStart(childComplexity), true

	case "NewProductPriceSchedule.UseCumulativeQuantity":
		if e.complexity.NewProductPriceSchedule.UseCumulativeQuantity == nil {
			break
		}

		return e.complexity.NewProductPriceSchedule.UseCumulativeQuantity(childComplexity), true

	case "OrderCloudMeta.ItemRange":
		if e.complexity.OrderCloudMeta.ItemRange == nil {
			break
		}

		return e.complexity.OrderCloudMeta.ItemRange(childComplexity), true

	case "OrderCloudMeta.NextPageKey":
		if e.complexity.OrderCloudMeta.NextPageKey == nil {
			break
		}

		return e.complexity.OrderCloudMeta.NextPageKey(childComplexity), true

	case "OrderCloudMeta.Page":
		if e.complexity.OrderCloudMeta.Page == nil {
			break
		}

		return e.complexity.OrderCloudMeta.Page(childComplexity), true

	case "OrderCloudMeta.PageSize":
		if e.complexity.OrderCloudMeta.PageSize == nil {
			break
		}

		return e.complexity.OrderCloudMeta.PageSize(childComplexity), true

	case "OrderCloudMeta.TotalCount":
		if e.complexity.OrderCloudMeta.TotalCount == nil {
			break
		}

		return e.complexity.OrderCloudMeta.TotalCount(childComplexity), true

	case "OrderCloudMeta.TotalPages":
		if e.complexity.OrderCloudMeta.TotalPages == nil {
			break
		}

		return e.complexity.OrderCloudMeta.TotalPages(childComplexity), true

	case "PriceBreak.Price":
		if e.complexity.PriceBreak.Price == nil {
			break
		}

		return e.complexity.PriceBreak.Price(childComplexity), true

	case "PriceBreak.Quantity":
		if e.complexity.PriceBreak.Quantity == nil {
			break
		}

		return e.complexity.PriceBreak.Quantity(childComplexity), true

	case "PriceBreak.SalePrice":
		if e.complexity.PriceBreak.SalePrice == nil {
			break
		}

		return e.complexity.PriceBreak.SalePrice(childComplexity), true

	case "PriceScheduleItem.ApplyShipping":
		if e.complexity.PriceScheduleItem.ApplyShipping == nil {
			break
		}

		return e.complexity.PriceScheduleItem.ApplyShipping(childComplexity), true

	case "PriceScheduleItem.ApplyTax":
		if e.complexity.PriceScheduleItem.ApplyTax == nil {
			break
		}

		return e.complexity.PriceScheduleItem.ApplyTax(childComplexity), true

	case "PriceScheduleItem.Currency":
		if e.complexity.PriceScheduleItem.Currency == nil {
			break
		}

		return e.complexity.PriceScheduleItem.Currency(childComplexity), true

	case "PriceScheduleItem.ID":
		if e.complexity.PriceScheduleItem.ID == nil {
			break
		}

		return e.complexity.PriceScheduleItem.ID(childComplexity), true

	case "PriceScheduleItem.IsOnSale":
		if e.complexity.PriceScheduleItem.IsOnSale == nil {
			break
		}

		return e.complexity.PriceScheduleItem.IsOnSale(childComplexity), true

	case "PriceScheduleItem.MaxQuantity":
		if e.complexity.PriceScheduleItem.MaxQuantity == nil {
			break
		}

		return e.complexity.PriceScheduleItem.MaxQuantity(childComplexity), true

	case "PriceScheduleItem.MinQuantity":
		if e.complexity.PriceScheduleItem.MinQuantity == nil {
			break
		}

		return e.complexity.PriceScheduleItem.MinQuantity(childComplexity), true

	case "PriceScheduleItem.Name":
		if e.complexity.PriceScheduleItem.Name == nil {
			break
		}

		return e.complexity.PriceScheduleItem.Name(childComplexity), true

	case "PriceScheduleItem.OwnerID":
		if e.complexity.PriceScheduleItem.OwnerID == nil {
			break
		}

		return e.complexity.PriceScheduleItem.OwnerID(childComplexity), true

	case "PriceScheduleItem.PriceBreaks":
		if e.complexity.PriceScheduleItem.PriceBreaks == nil {
			break
		}

		return e.complexity.PriceScheduleItem.PriceBreaks(childComplexity), true

	case "PriceScheduleItem.RestrictedQuantity":
		if e.complexity.PriceScheduleItem.RestrictedQuantity == nil {
			break
		}

		return e.complexity.PriceScheduleItem.RestrictedQuantity(childComplexity), true

	case "PriceScheduleItem.SaleEnd":
		if e.complexity.PriceScheduleItem.SaleEnd == nil {
			break
		}

		return e.complexity.PriceScheduleItem.SaleEnd(childComplexity), true

	case "PriceScheduleItem.SaleStart":
		if e.complexity.PriceScheduleItem.SaleStart == nil {
			break
		}

		return e.complexity.PriceScheduleItem.SaleStart(childComplexity), true

	case "PriceScheduleItem.UseCumulativeQuantity":
		if e.complexity.PriceScheduleItem.UseCumulativeQuantity == nil {
			break
		}

		return e.complexity.PriceScheduleItem.UseCumulativeQuantity(childComplexity), true

	case "PriceScheduleItem.XP":
		if e.complexity.PriceScheduleItem.Xp == nil {
			break
		}

		return e.complexity.PriceScheduleItem.Xp(childComplexity), true

	case "PriceScheduleResponse.Items":
		if e.complexity.PriceScheduleResponse.Items == nil {
			break
		}

		return e.complexity.PriceScheduleResponse.Items(childComplexity), true

	case "PriceScheduleResponse.Meta":
		if e.complexity.PriceScheduleResponse.Meta == nil {
			break
		}

		return e.complexity.PriceScheduleResponse.Meta(childComplexity), true

	case "PriceScheduleXP.Type":
		if e.complexity.PriceScheduleXP.Type == nil {
			break
		}

		return e.complexity.PriceScheduleXP.Type(childComplexity), true

	case "ProductBatch.BatchExpirationDate":
		if e.complexity.ProductBatch.BatchExpirationDate == nil {
			break
		}

		return e.complexity.ProductBatch.BatchExpirationDate(childComplexity), true

	case "ProductBatch.BatchNumber":
		if e.complexity.ProductBatch.BatchNumber == nil {
			break
		}

		return e.complexity.ProductBatch.BatchNumber(childComplexity), true

	case "ProductBatch.BatchStockQuantity":
		if e.complexity.ProductBatch.BatchStockQuantity == nil {
			break
		}

		return e.complexity.ProductBatch.BatchStockQuantity(childComplexity), true

	case "ProductDocument.FileName":
		if e.complexity.ProductDocument.FileName == nil {
			break
		}

		return e.complexity.ProductDocument.FileName(childComplexity), true

	case "ProductDocument.Url":
		if e.complexity.ProductDocument.URL == nil {
			break
		}

		return e.complexity.ProductDocument.URL(childComplexity), true

	case "ProductFacet.Supplier":
		if e.complexity.ProductFacet.Supplier == nil {
			break
		}

		return e.complexity.ProductFacet.Supplier(childComplexity), true

	case "ProductFilter.filterCount":
		if e.complexity.ProductFilter.FilterCount == nil {
			break
		}

		return e.complexity.ProductFilter.FilterCount(childComplexity), true

	case "ProductFilter.filterKey":
		if e.complexity.ProductFilter.FilterKey == nil {
			break
		}

		return e.complexity.ProductFilter.FilterKey(childComplexity), true

	case "ProductImage.Tags":
		if e.complexity.ProductImage.Tags == nil {
			break
		}

		return e.complexity.ProductImage.Tags(childComplexity), true

	case "ProductImage.ThumbnailUrl":
		if e.complexity.ProductImage.ThumbnailURL == nil {
			break
		}

		return e.complexity.ProductImage.ThumbnailURL(childComplexity), true

	case "ProductImage.Url":
		if e.complexity.ProductImage.URL == nil {
			break
		}

		return e.complexity.ProductImage.URL(childComplexity), true

	case "ProductItem.Active":
		if e.complexity.ProductItem.Active == nil {
			break
		}

		return e.complexity.ProductItem.Active(childComplexity), true

	case "ProductItem.AllSuppliersCanSell":
		if e.complexity.ProductItem.AllSuppliersCanSell == nil {
			break
		}

		return e.complexity.ProductItem.AllSuppliersCanSell(childComplexity), true

	case "ProductItem.AutoForward":
		if e.complexity.ProductItem.AutoForward == nil {
			break
		}

		return e.complexity.ProductItem.AutoForward(childComplexity), true

	case "ProductItem.DefaultPriceScheduleID":
		if e.complexity.ProductItem.DefaultPriceScheduleID == nil {
			break
		}

		return e.complexity.ProductItem.DefaultPriceScheduleID(childComplexity), true

	case "ProductItem.DefaultSupplierID":
		if e.complexity.ProductItem.DefaultSupplierID == nil {
			break
		}

		return e.complexity.ProductItem.DefaultSupplierID(childComplexity), true

	case "ProductItem.Description":
		if e.complexity.ProductItem.Description == nil {
			break
		}

		return e.complexity.ProductItem.Description(childComplexity), true

	case "ProductItem.ID":
		if e.complexity.ProductItem.ID == nil {
			break
		}

		return e.complexity.ProductItem.ID(childComplexity), true

	case "ProductItem.Inventory":
		if e.complexity.ProductItem.Inventory == nil {
			break
		}

		return e.complexity.ProductItem.Inventory(childComplexity), true

	case "ProductItem.IsFavorite":
		if e.complexity.ProductItem.IsFavorite == nil {
			break
		}

		return e.complexity.ProductItem.IsFavorite(childComplexity), true

	case "ProductItem.Name":
		if e.complexity.ProductItem.Name == nil {
			break
		}

		return e.complexity.ProductItem.Name(childComplexity), true

	case "ProductItem.OwnerID":
		if e.complexity.ProductItem.OwnerID == nil {
			break
		}

		return e.complexity.ProductItem.OwnerID(childComplexity), true

	case "ProductItem.PriceSchedule":
		if e.complexity.ProductItem.PriceSchedule == nil {
			break
		}

		return e.complexity.ProductItem.PriceSchedule(childComplexity), true

	case "ProductItem.QuantityMultiplier":
		if e.complexity.ProductItem.QuantityMultiplier == nil {
			break
		}

		return e.complexity.ProductItem.QuantityMultiplier(childComplexity), true

	case "ProductItem.Returnable":
		if e.complexity.ProductItem.Returnable == nil {
			break
		}

		return e.complexity.ProductItem.Returnable(childComplexity), true

	case "ProductItem.ShipFromAddressID":
		if e.complexity.ProductItem.ShipFromAddressID == nil {
			break
		}

		return e.complexity.ProductItem.ShipFromAddressID(childComplexity), true

	case "ProductItem.ShipHeight":
		if e.complexity.ProductItem.ShipHeight == nil {
			break
		}

		return e.complexity.ProductItem.ShipHeight(childComplexity), true

	case "ProductItem.ShipLength":
		if e.complexity.ProductItem.ShipLength == nil {
			break
		}

		return e.complexity.ProductItem.ShipLength(childComplexity), true

	case "ProductItem.ShipWeight":
		if e.complexity.ProductItem.ShipWeight == nil {
			break
		}

		return e.complexity.ProductItem.ShipWeight(childComplexity), true

	case "ProductItem.ShipWidth":
		if e.complexity.ProductItem.ShipWidth == nil {
			break
		}

		return e.complexity.ProductItem.ShipWidth(childComplexity), true

	case "ProductItem.SpecCount":
		if e.complexity.ProductItem.SpecCount == nil {
			break
		}

		return e.complexity.ProductItem.SpecCount(childComplexity), true

	case "ProductItem.VariantCount":
		if e.complexity.ProductItem.VariantCount == nil {
			break
		}

		return e.complexity.ProductItem.VariantCount(childComplexity), true

	case "ProductItem.XP":
		if e.complexity.ProductItem.Xp == nil {
			break
		}

		return e.complexity.ProductItem.Xp(childComplexity), true

	case "ProductMeta.Facets":
		if e.complexity.ProductMeta.Facets == nil {
			break
		}

		return e.complexity.ProductMeta.Facets(childComplexity), true

	case "ProductMeta.ItemRange":
		if e.complexity.ProductMeta.ItemRange == nil {
			break
		}

		return e.complexity.ProductMeta.ItemRange(childComplexity), true

	case "ProductMeta.NextPageKey":
		if e.complexity.ProductMeta.NextPageKey == nil {
			break
		}

		return e.complexity.ProductMeta.NextPageKey(childComplexity), true

	case "ProductMeta.Page":
		if e.complexity.ProductMeta.Page == nil {
			break
		}

		return e.complexity.ProductMeta.Page(childComplexity), true

	case "ProductMeta.PageSize":
		if e.complexity.ProductMeta.PageSize == nil {
			break
		}

		return e.complexity.ProductMeta.PageSize(childComplexity), true

	case "ProductMeta.TotalCount":
		if e.complexity.ProductMeta.TotalCount == nil {
			break
		}

		return e.complexity.ProductMeta.TotalCount(childComplexity), true

	case "ProductMeta.TotalPages":
		if e.complexity.ProductMeta.TotalPages == nil {
			break
		}

		return e.complexity.ProductMeta.TotalPages(childComplexity), true

	case "ProductPromotions.AllowAllBuyers":
		if e.complexity.ProductPromotions.AllowAllBuyers == nil {
			break
		}

		return e.complexity.ProductPromotions.AllowAllBuyers(childComplexity), true

	case "ProductPromotions.CanCombine":
		if e.complexity.ProductPromotions.CanCombine == nil {
			break
		}

		return e.complexity.ProductPromotions.CanCombine(childComplexity), true

	case "ProductPromotions.Code":
		if e.complexity.ProductPromotions.Code == nil {
			break
		}

		return e.complexity.ProductPromotions.Code(childComplexity), true

	case "ProductPromotions.Description":
		if e.complexity.ProductPromotions.Description == nil {
			break
		}

		return e.complexity.ProductPromotions.Description(childComplexity), true

	case "ProductPromotions.EligibleExpression":
		if e.complexity.ProductPromotions.EligibleExpression == nil {
			break
		}

		return e.complexity.ProductPromotions.EligibleExpression(childComplexity), true

	case "ProductPromotions.ExpirationDate":
		if e.complexity.ProductPromotions.ExpirationDate == nil {
			break
		}

		return e.complexity.ProductPromotions.ExpirationDate(childComplexity), true

	case "ProductPromotions.FinePrint":
		if e.complexity.ProductPromotions.FinePrint == nil {
			break
		}

		return e.complexity.ProductPromotions.FinePrint(childComplexity), true

	case "ProductPromotions.ID":
		if e.complexity.ProductPromotions.ID == nil {
			break
		}

		return e.complexity.ProductPromotions.ID(childComplexity), true

	case "ProductPromotions.LineItemLevel":
		if e.complexity.ProductPromotions.LineItemLevel == nil {
			break
		}

		return e.complexity.ProductPromotions.LineItemLevel(childComplexity), true

	case "ProductPromotions.Name":
		if e.complexity.ProductPromotions.Name == nil {
			break
		}

		return e.complexity.ProductPromotions.Name(childComplexity), true

	case "ProductPromotions.OwnerID":
		if e.complexity.ProductPromotions.OwnerID == nil {
			break
		}

		return e.complexity.ProductPromotions.OwnerID(childComplexity), true

	case "ProductPromotions.RedemptionCount":
		if e.complexity.ProductPromotions.RedemptionCount == nil {
			break
		}

		return e.complexity.ProductPromotions.RedemptionCount(childComplexity), true

	case "ProductPromotions.RedemptionLimit":
		if e.complexity.ProductPromotions.RedemptionLimit == nil {
			break
		}

		return e.complexity.ProductPromotions.RedemptionLimit(childComplexity), true

	case "ProductPromotions.RedemptionLimitPerUser":
		if e.complexity.ProductPromotions.RedemptionLimitPerUser == nil {
			break
		}

		return e.complexity.ProductPromotions.RedemptionLimitPerUser(childComplexity), true

	case "ProductPromotions.StartDate":
		if e.complexity.ProductPromotions.StartDate == nil {
			break
		}

		return e.complexity.ProductPromotions.StartDate(childComplexity), true

	case "ProductPromotions.ValueExpression":
		if e.complexity.ProductPromotions.ValueExpression == nil {
			break
		}

		return e.complexity.ProductPromotions.ValueExpression(childComplexity), true

	case "ProductPromotions.xp":
		if e.complexity.ProductPromotions.Xp == nil {
			break
		}

		return e.complexity.ProductPromotions.Xp(childComplexity), true

	case "ProductPromotionsXp.AppliesTo":
		if e.complexity.ProductPromotionsXp.AppliesTo == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.AppliesTo(childComplexity), true

	case "ProductPromotionsXp.Automatic":
		if e.complexity.ProductPromotionsXp.Automatic == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.Automatic(childComplexity), true

	case "ProductPromotionsXp.BOGO":
		if e.complexity.ProductPromotionsXp.Bogo == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.Bogo(childComplexity), true

	case "ProductPromotionsXp.Buyers":
		if e.complexity.ProductPromotionsXp.Buyers == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.Buyers(childComplexity), true

	case "ProductPromotionsXp.MaxShipCost":
		if e.complexity.ProductPromotionsXp.MaxShipCost == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.MaxShipCost(childComplexity), true

	case "ProductPromotionsXp.MinReq":
		if e.complexity.ProductPromotionsXp.MinReq == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.MinReq(childComplexity), true

	case "ProductPromotionsXp.SKUs":
		if e.complexity.ProductPromotionsXp.SKUs == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.SKUs(childComplexity), true

	case "ProductPromotionsXp.ScopeToSupplier":
		if e.complexity.ProductPromotionsXp.ScopeToSupplier == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.ScopeToSupplier(childComplexity), true

	case "ProductPromotionsXp.Supplier":
		if e.complexity.ProductPromotionsXp.Supplier == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.Supplier(childComplexity), true

	case "ProductPromotionsXp.Type":
		if e.complexity.ProductPromotionsXp.Type == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.Type(childComplexity), true

	case "ProductPromotionsXp.Value":
		if e.complexity.ProductPromotionsXp.Value == nil {
			break
		}

		return e.complexity.ProductPromotionsXp.Value(childComplexity), true

	case "ProductPromotionsXpBogo.BuySKU":
		if e.complexity.ProductPromotionsXpBogo.BuySku == nil {
			break
		}

		return e.complexity.ProductPromotionsXpBogo.BuySku(childComplexity), true

	case "ProductPromotionsXpBogo.GetSKU":
		if e.complexity.ProductPromotionsXpBogo.GetSku == nil {
			break
		}

		return e.complexity.ProductPromotionsXpBogo.GetSku(childComplexity), true

	case "ProductPromotionsXpBogo.Type":
		if e.complexity.ProductPromotionsXpBogo.Type == nil {
			break
		}

		return e.complexity.ProductPromotionsXpBogo.Type(childComplexity), true

	case "ProductPromotionsXpBogo.Value":
		if e.complexity.ProductPromotionsXpBogo.Value == nil {
			break
		}

		return e.complexity.ProductPromotionsXpBogo.Value(childComplexity), true

	case "ProductPromotionsXpMinReq.Int":
		if e.complexity.ProductPromotionsXpMinReq.Int == nil {
			break
		}

		return e.complexity.ProductPromotionsXpMinReq.Int(childComplexity), true

	case "ProductPromotionsXpMinReq.Type":
		if e.complexity.ProductPromotionsXpMinReq.Type == nil {
			break
		}

		return e.complexity.ProductPromotionsXpMinReq.Type(childComplexity), true

	case "ProductResponse.Items":
		if e.complexity.ProductResponse.Items == nil {
			break
		}

		return e.complexity.ProductResponse.Items(childComplexity), true

	case "ProductResponse.Meta":
		if e.complexity.ProductResponse.Meta == nil {
			break
		}

		return e.complexity.ProductResponse.Meta(childComplexity), true

	case "ProductResponseV2.Items":
		if e.complexity.ProductResponseV2.Items == nil {
			break
		}

		return e.complexity.ProductResponseV2.Items(childComplexity), true

	case "ProductResponseV2.Meta":
		if e.complexity.ProductResponseV2.Meta == nil {
			break
		}

		return e.complexity.ProductResponseV2.Meta(childComplexity), true

	case "ProductTax.Code":
		if e.complexity.ProductTax.Code == nil {
			break
		}

		return e.complexity.ProductTax.Code(childComplexity), true

	case "ProductTax.Description":
		if e.complexity.ProductTax.Description == nil {
			break
		}

		return e.complexity.ProductTax.Description(childComplexity), true

	case "ProductTax.LongDescription":
		if e.complexity.ProductTax.LongDescription == nil {
			break
		}

		return e.complexity.ProductTax.LongDescription(childComplexity), true

	case "ProductXP.Accessorials":
		if e.complexity.ProductXP.Accessorials == nil {
			break
		}

		return e.complexity.ProductXP.Accessorials(childComplexity), true

	case "ProductXP.ArtworkRequired":
		if e.complexity.ProductXP.ArtworkRequired == nil {
			break
		}

		return e.complexity.ProductXP.ArtworkRequired(childComplexity), true

	case "ProductXP.Brand":
		if e.complexity.ProductXP.Brand == nil {
			break
		}

		return e.complexity.ProductXP.Brand(childComplexity), true

	case "ProductXP.Company":
		if e.complexity.ProductXP.Company == nil {
			break
		}

		return e.complexity.ProductXP.Company(childComplexity), true

	case "ProductXP.CountryOfOrigin":
		if e.complexity.ProductXP.CountryOfOrigin == nil {
			break
		}

		return e.complexity.ProductXP.CountryOfOrigin(childComplexity), true

	case "ProductXP.Currency":
		if e.complexity.ProductXP.Currency == nil {
			break
		}

		return e.complexity.ProductXP.Currency(childComplexity), true

	case "ProductXP.CustomerRating":
		if e.complexity.ProductXP.CustomerRating == nil {
			break
		}

		return e.complexity.ProductXP.CustomerRating(childComplexity), true

	case "ProductXP.Documents":
		if e.complexity.ProductXP.Documents == nil {
			break
		}

		return e.complexity.ProductXP.Documents(childComplexity), true

	case "ProductXP.Facets":
		if e.complexity.ProductXP.Facets == nil {
			break
		}

		return e.complexity.ProductXP.Facets(childComplexity), true

	case "ProductXP.FreeShipping":
		if e.complexity.ProductXP.FreeShipping == nil {
			break
		}

		return e.complexity.ProductXP.FreeShipping(childComplexity), true

	case "ProductXP.FreeShippingMessage":
		if e.complexity.ProductXP.FreeShippingMessage == nil {
			break
		}

		return e.complexity.ProductXP.FreeShippingMessage(childComplexity), true

	case "ProductXP.HasVariants":
		if e.complexity.ProductXP.HasVariants == nil {
			break
		}

		return e.complexity.ProductXP.HasVariants(childComplexity), true

	case "ProductXP.Images":
		if e.complexity.ProductXP.Images == nil {
			break
		}

		return e.complexity.ProductXP.Images(childComplexity), true

	case "ProductXP.IntegrationData":
		if e.complexity.ProductXP.IntegrationData == nil {
			break
		}

		return e.complexity.ProductXP.IntegrationData(childComplexity), true

	case "ProductXP.IsResale":
		if e.complexity.ProductXP.IsResale == nil {
			break
		}

		return e.complexity.ProductXP.IsResale(childComplexity), true

	case "ProductXP.Manufacturer":
		if e.complexity.ProductXP.Manufacturer == nil {
			break
		}

		return e.complexity.ProductXP.Manufacturer(childComplexity), true

	case "ProductXP.Notes":
		if e.complexity.ProductXP.Notes == nil {
			break
		}

		return e.complexity.ProductXP.Notes(childComplexity), true

	case "ProductXP.ProductBatch":
		if e.complexity.ProductXP.ProductBatch == nil {
			break
		}

		return e.complexity.ProductXP.ProductBatch(childComplexity), true

	case "ProductXP.ProductRegistrationNumber":
		if e.complexity.ProductXP.ProductRegistrationNumber == nil {
			break
		}

		return e.complexity.ProductXP.ProductRegistrationNumber(childComplexity), true

	case "ProductXP.ProductType":
		if e.complexity.ProductXP.ProductType == nil {
			break
		}

		return e.complexity.ProductXP.ProductType(childComplexity), true

	case "ProductXP.PromotionEligible":
		if e.complexity.ProductXP.PromotionEligible == nil {
			break
		}

		return e.complexity.ProductXP.PromotionEligible(childComplexity), true

	case "ProductXP.PromotionExists":
		if e.complexity.ProductXP.PromotionExists == nil {
			break
		}

		return e.complexity.ProductXP.PromotionExists(childComplexity), true

	case "ProductXP.Promotions":
		if e.complexity.ProductXP.Promotions == nil {
			break
		}

		return e.complexity.ProductXP.Promotions(childComplexity), true

	case "ProductXP.SizeTier":
		if e.complexity.ProductXP.SizeTier == nil {
			break
		}

		return e.complexity.ProductXP.SizeTier(childComplexity), true

	case "ProductXP.Status":
		if e.complexity.ProductXP.Status == nil {
			break
		}

		return e.complexity.ProductXP.Status(childComplexity), true

	case "ProductXP.SupplierImage":
		if e.complexity.ProductXP.SupplierImage == nil {
			break
		}

		return e.complexity.ProductXP.SupplierImage(childComplexity), true

	case "ProductXP.Tax":
		if e.complexity.ProductXP.Tax == nil {
			break
		}

		return e.complexity.ProductXP.Tax(childComplexity), true

	case "ProductXP.TherapeuticClass":
		if e.complexity.ProductXP.TherapeuticClass == nil {
			break
		}

		return e.complexity.ProductXP.TherapeuticClass(childComplexity), true

	case "ProductXP.UnitOfMeasure":
		if e.complexity.ProductXP.UnitOfMeasure == nil {
			break
		}

		return e.complexity.ProductXP.UnitOfMeasure(childComplexity), true

	case "ProductXP.Workflow":
		if e.complexity.ProductXP.Workflow == nil {
			break
		}

		return e.complexity.ProductXP.Workflow(childComplexity), true

	case "Query.categories":
		if e.complexity.Query.Categories == nil {
			break
		}

		args, err := ec.field_Query_categories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Categories(childComplexity, args["catalogID"].(*string), args["depth"].(*string)), true

	case "Query.getProductFilter":
		if e.complexity.Query.GetProductFilter == nil {
			break
		}

		args, err := ec.field_Query_getProductFilter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProductFilter(childComplexity, args["Search"].(string)), true

	case "Query.priceSchedules":
		if e.complexity.Query.PriceSchedules == nil {
			break
		}

		args, err := ec.field_Query_priceSchedules_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PriceSchedules(childComplexity, args["productID"].(string), args["page"].(*string), args["pageSize"].(*string)), true

	case "Query.product":
		if e.complexity.Query.Product == nil {
			break
		}

		args, err := ec.field_Query_product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Product(childComplexity, args["id"].(string)), true

	case "Query.productV2":
		if e.complexity.Query.ProductV2 == nil {
			break
		}

		args, err := ec.field_Query_productV2_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProductV2(childComplexity, args["id"].(string)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["catalogID"].(*string), args["categoryID"].(*string), args["supplierID"].(*string), args["isFavorite"].(*bool), args["search"].(*string), args["page"].(*string), args["pageSize"].(*string), args["sortBy"].(*string), args["extraFilters"].(map[string]interface{})), true

	case "Query.productsV2":
		if e.complexity.Query.ProductsV2 == nil {
			break
		}

		args, err := ec.field_Query_productsV2_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProductsV2(childComplexity, args["catalogID"].(*string), args["categoryID"].(*string), args["supplierID"].(*string), args["isFavorite"].(*bool), args["search"].(*string), args["page"].(*string), args["pageSize"].(*string), args["sortBy"].(*string), args["extraFilters"].(map[string]interface{})), true

	case "Query.recentSearches":
		if e.complexity.Query.RecentSearches == nil {
			break
		}

		args, err := ec.field_Query_recentSearches_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecentSearches(childComplexity, args["page"].(*string), args["pageSize"].(*string)), true

	case "Query.recommendProducts":
		if e.complexity.Query.RecommendProducts == nil {
			break
		}

		args, err := ec.field_Query_recommendProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecommendProducts(childComplexity, args["productID"].(string), args["page"].(*string), args["pageSize"].(*string)), true

	case "Query.similarProducts":
		if e.complexity.Query.SimilarProducts == nil {
			break
		}

		args, err := ec.field_Query_similarProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SimilarProducts(childComplexity, args["productID"].(string), args["page"].(*string), args["pageSize"].(*string)), true

	case "Query.trendingProducts":
		if e.complexity.Query.TrendingProducts == nil {
			break
		}

		return e.complexity.Query.TrendingProducts(childComplexity), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "RecentSearch.CreatedAt":
		if e.complexity.RecentSearch.CreatedAt == nil {
			break
		}

		return e.complexity.RecentSearch.CreatedAt(childComplexity), true

	case "RecentSearch.ID":
		if e.complexity.RecentSearch.ID == nil {
			break
		}

		return e.complexity.RecentSearch.ID(childComplexity), true

	case "RecentSearch.SearchKeyword":
		if e.complexity.RecentSearch.SearchKeyword == nil {
			break
		}

		return e.complexity.RecentSearch.SearchKeyword(childComplexity), true

	case "RecentSearch.UserID":
		if e.complexity.RecentSearch.UserID == nil {
			break
		}

		return e.complexity.RecentSearch.UserID(childComplexity), true

	case "TrendingProduct.OrderCount":
		if e.complexity.TrendingProduct.OrderCount == nil {
			break
		}

		return e.complexity.TrendingProduct.OrderCount(childComplexity), true

	case "TrendingProduct.ProductID":
		if e.complexity.TrendingProduct.ProductID == nil {
			break
		}

		return e.complexity.TrendingProduct.ProductID(childComplexity), true

	case "TrendingProduct.Quantity":
		if e.complexity.TrendingProduct.Quantity == nil {
			break
		}

		return e.complexity.TrendingProduct.Quantity(childComplexity), true

	case "UnitOfMeasure.Qty":
		if e.complexity.UnitOfMeasure.Qty == nil {
			break
		}

		return e.complexity.UnitOfMeasure.Qty(childComplexity), true

	case "UnitOfMeasure.Unit":
		if e.complexity.UnitOfMeasure.Unit == nil {
			break
		}

		return e.complexity.UnitOfMeasure.Unit(childComplexity), true

	case "UserProductFavorite.CreatedAt":
		if e.complexity.UserProductFavorite.CreatedAt == nil {
			break
		}

		return e.complexity.UserProductFavorite.CreatedAt(childComplexity), true

	case "UserProductFavorite.ID":
		if e.complexity.UserProductFavorite.ID == nil {
			break
		}

		return e.complexity.UserProductFavorite.ID(childComplexity), true

	case "UserProductFavorite.ProductID":
		if e.complexity.UserProductFavorite.ProductID == nil {
			break
		}

		return e.complexity.UserProductFavorite.ProductID(childComplexity), true

	case "UserProductFavorite.UserID":
		if e.complexity.UserProductFavorite.UserID == nil {
			break
		}

		return e.complexity.UserProductFavorite.UserID(childComplexity), true

	case "Workflow.RejectionReasons":
		if e.complexity.Workflow.RejectionReasons == nil {
			break
		}

		return e.complexity.Workflow.RejectionReasons(childComplexity), true

	case "_Service.sdl":
		if e.complexity._Service.SDL == nil {
			break
		}

		return e.complexity._Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `directive @goTag(
    key: String!
    value: String
) repeatable on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Any
scalar Map
scalar Time

type ProductResponse {
    Meta: ProductMeta
    Items: [ProductItem]
}
type ProductResponseV2 {
    Meta: ProductMeta
    Items: [LatestProductItems]
}

type LatestProductItems {
  Draft: Draft
  Id: String
  Variants: [String]
  Specs: [String]
  PriceSchedule: NewProductPriceSchedule
  Product: ProductItem
}

type Draft {
  ID: String
  Status: String
  RejectionReason: String
}
type NewProductPriceSchedule {
  OwnerID: String
  ID: String
  Name: String
  ApplyTax: Boolean
  ApplyShipping: Boolean
  MinQuantity: Int
  MaxQuantity: Int
  UseCumulativeQuantity: Boolean
  RestrictedQuantity: Boolean
  Currency: String
  SaleStart: String
  SaleEnd: String
  IsOnSale: Boolean
  PriceBreaks: [PriceBreak]
}

type ProductMeta {
    Facets : Any
    Page : Int
    PageSize : Int
    TotalCount : Int
    TotalPages : Int
    ItemRange : [Int]
    NextPageKey : String
}

type ProductItem {
    OwnerID : String
    DefaultPriceScheduleID : String
    AutoForward : Boolean
    ID : String
    Name : String
    Description : String
    QuantityMultiplier : Int
    ShipWeight : Float
    ShipHeight : Float
    ShipWidth : Float
    ShipLength : Float
    Active : Boolean
    SpecCount : Int
    VariantCount : Int
    ShipFromAddressID : String
    Inventory: Inventory
    DefaultSupplierID : String
    AllSuppliersCanSell : Boolean
    Returnable : Boolean
    XP : ProductXP
    IsFavorite : Boolean!
    PriceSchedule : PriceScheduleItem
}

type Inventory {
    Enabled : Boolean
    NotificationPoint : String
    VariantLevelTracking : Boolean
    OrderCanExceed : Boolean
    QuantityAvailable : Int
    LastUpdated : Time
}

type ProductXP {
    Company: String
    Status: String
    ArtworkRequired: Boolean
    ProductRegistrationNumber: String
    Facets: ProductFacet
    Manufacturer: String
    FreeShipping: Boolean
    UnitOfMeasure: UnitOfMeasure
    Images: [ProductImage]
    ProductType: String
    CountryOfOrigin: String
    PromotionEligible: Boolean
    PromotionExists: Boolean
    Workflow: Workflow
    ProductBatch: ProductBatch
    Tax: ProductTax
    TherapeuticClass: String
    HasVariants: Boolean
    Accessorials: [String]
    FreeShippingMessage: String
    IsResale: Boolean
    Brand: String
    CustomerRating: String
    SizeTier: String
    IntegrationData: String
    Notes: String
    Currency: String
    Documents: [ProductDocument]
    Promotions: [ProductPromotions]
    SupplierImage: String
}

type ProductPromotions {
  ID: String
  LineItemLevel: Boolean
  Code: String
  Name: String
  RedemptionLimit: String
  RedemptionLimitPerUser: Float
  RedemptionCount: Int
  Description: String
  FinePrint: String
  StartDate: String
  ExpirationDate: String
  EligibleExpression: String
  ValueExpression: String
  CanCombine: Boolean
  AllowAllBuyers: Boolean
  OwnerID: String
  xp: ProductPromotionsXp
}

type GetBuySku {
  SKU: String
  Qty: String
}

type ProductPromotionsXpBogo {
  Type: String
  Value: String
  GetSKU: GetBuySku
  BuySKU: GetBuySku
}

type ProductPromotionsXpMinReq {
  Type: String
  Int: Int
}

type ProductPromotionsXp {
  Type: String
  Value: Int
  AppliesTo: String
  ScopeToSupplier: Boolean
  Supplier: String
  Automatic: Boolean
  MaxShipCost: String
  Buyers: [String]
  BOGO: ProductPromotionsXpBogo
  MinReq: ProductPromotionsXpMinReq
  SKUs: [String]
}


type ProductFacet {
    Supplier: [String]
}

type UnitOfMeasure {
    Qty : Int
    Unit : String
}

type ProductImage {
    ThumbnailUrl : String
    Url : String
    Tags : [String]
}

type Workflow {
    RejectionReasons : String
}

type ProductBatch {
    BatchNumber : Any
    BatchExpirationDate : String
    BatchStockQuantity : Int
}

type ProductTax {
    Description : String
    LongDescription : String
    Code : String
}

type ProductDocument {
    FileName : String
    Url : String
}

type PriceScheduleResponse {
    Meta: OrderCloudMeta
    Items: [PriceScheduleItem]
}

type OrderCloudMeta {
    Page : Int
    PageSize : Int
    TotalCount : Int
    TotalPages : Int
    ItemRange : [Int]
    NextPageKey : String
}

type PriceScheduleItem {
    OwnerID : String
    ID : String
    Name : String
    ApplyTax : Boolean
    ApplyShipping : Boolean
    MinQuantity : Int
    MaxQuantity : Int
    UseCumulativeQuantity : Boolean
    RestrictedQuantity : Boolean
    PriceBreaks : [PriceBreak]
    Currency : String
    SaleStart : String
    SaleEnd : String
    IsOnSale : Boolean
    XP : PriceScheduleXP
}

type PriceBreak {
    Quantity : Int
    Price : Float
    SalePrice : Float
}

type PriceScheduleXP {
    Type : String
}

type CategoryResponse  {
	Meta  :CategoryMeta!  
	Items :[CategoryItems!]!
}

type CategoryMeta  {
	Page        : Int!  
	PageSize    : Int!     
	TotalCount  : Int!       
	TotalPages  : Int!        
	ItemRange   : [Int]!     
	NextPageKey : String!
}

type CategoryItems  {
	ID          : String!     
	Name        : String!      
	Description : String!         
	ListOrder   : Int!            
	Active      : Boolean!       
	ParentID    : String!        
	ChildCount  : Int!           
	Xp          : Any
	ChildData   : [CategoryItems!]!
}

type UserProductFavorite {
    ID: Int @goTag(key: "structs", value: "id") @goTag(key: "db", value: "id")
    UserID: String @goTag(key: "structs", value: "user_id") @goTag(key: "db", value: "user_id")
    ProductID: String @goTag(key: "structs", value: "product_id") @goTag(key: "db", value: "product_id")
    CreatedAt: Time @goTag(key: "structs", value: "created_at") @goTag(key: "db", value: "created_at")
}

type TrendingProduct {
    ProductID: String @goTag(key: "structs", value: "product_id") @goTag(key: "db", value: "product_id")
    OrderCount: Int @goTag(key: "structs", value: "order_count") @goTag(key: "db", value: "order_count")
    Quantity: Int @goTag(key: "structs", value: "quantity") @goTag(key: "db", value: "quantity")
}

type ProductFilter {
  filterKey: String
  filterCount: Int
}

type RecentSearch {
    ID: Int @goTag(key: "structs", value: "id") @goTag(key: "db", value: "id")
    UserID: String @goTag(key: "structs", value: "user_id") @goTag(key: "db", value: "user_id")
    SearchKeyword: String @goTag(key: "structs", value: "search_keyword") @goTag(key: "db", value: "search_keyword")
    CreatedAt: Time @goTag(key: "structs", value: "created_at") @goTag(key: "db", value: "created_at")
}

type Query {
    productsV2(catalogID: String, categoryID: String, supplierID: String, isFavorite: Boolean, search: String, page: String, pageSize: String, sortBy: String, extraFilters: Map): ProductResponseV2
    products(catalogID: String, categoryID: String, supplierID: String, isFavorite: Boolean, search: String, page: String, pageSize: String, sortBy: String, extraFilters: Map): ProductResponse
    similarProducts(productID: String!, page: String, pageSize: String): ProductResponse
    recommendProducts(productID: String!, page: String, pageSize: String): ProductResponseV2
    product(id: String!): ProductItem
    productV2(id: String!): LatestProductItems
    priceSchedules(productID: String!, page: String, pageSize: String): PriceScheduleResponse
    categories(catalogID: String, depth: String): CategoryResponse
    trendingProducts: ProductResponse
    getProductFilter(Search: String!): [ProductFilter]
    recentSearches(page: String, pageSize: String): [RecentSearch]
}

type Mutation {
    favoriteProduct(productID: String!, isFavorite: Boolean!): UserProductFavorite
}`, BuiltIn: false},
	{Name: "../../federation/directives.graphql", Input: `
	scalar _Any
	scalar _FieldSet

	directive @external on FIELD_DEFINITION
	directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
	directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
	directive @extends on OBJECT | INTERFACE

	directive @key(fields: _FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE
	directive @link(import: [String!], url: String!) repeatable on SCHEMA
	directive @shareable on OBJECT | FIELD_DEFINITION
	directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
	directive @override(from: String!) on FIELD_DEFINITION
	directive @inaccessible on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
`, BuiltIn: true},
	{Name: "../../federation/entity.graphql", Input: `
type _Service {
  sdl: String
}

extend type Query {
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_favoriteProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["productID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["isFavorite"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFavorite"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isFavorite"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_categories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["catalogID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalogID"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["catalogID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["depth"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("depth"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["depth"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getProductFilter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["Search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Search"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_priceSchedules_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["productID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_productV2_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_product_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_productsV2_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["catalogID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalogID"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["catalogID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["categoryID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryID"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["supplierID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierID"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supplierID"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["isFavorite"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFavorite"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isFavorite"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg7
	var arg8 map[string]interface{}
	if tmp, ok := rawArgs["extraFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraFilters"))
		arg8, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["extraFilters"] = arg8
	return args, nil
}

func (ec *executionContext) field_Query_products_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["catalogID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalogID"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["catalogID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["categoryID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryID"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["supplierID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierID"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supplierID"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["isFavorite"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFavorite"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isFavorite"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["sortBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortBy"] = arg7
	var arg8 map[string]interface{}
	if tmp, ok := rawArgs["extraFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extraFilters"))
		arg8, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["extraFilters"] = arg8
	return args, nil
}

func (ec *executionContext) field_Query_recentSearches_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_recommendProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["productID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_similarProducts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["productID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["pageSize"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pageSize"] = arg2
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CategoryItems_ID(ctx context.Context, field graphql.CollectedField, obj *model.CategoryItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryItems_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryItems_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryItems_Name(ctx context.Context, field graphql.CollectedField, obj *model.CategoryItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryItems_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryItems_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryItems_Description(ctx context.Context, field graphql.CollectedField, obj *model.CategoryItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryItems_Description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryItems_Description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryItems_ListOrder(ctx context.Context, field graphql.CollectedField, obj *model.CategoryItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryItems_ListOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryItems_ListOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryItems_Active(ctx context.Context, field graphql.CollectedField, obj *model.CategoryItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryItems_Active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryItems_Active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryItems_ParentID(ctx context.Context, field graphql.CollectedField, obj *model.CategoryItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryItems_ParentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryItems_ParentID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryItems_ChildCount(ctx context.Context, field graphql.CollectedField, obj *model.CategoryItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryItems_ChildCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryItems_ChildCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryItems_Xp(ctx context.Context, field graphql.CollectedField, obj *model.CategoryItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryItems_Xp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryItems_Xp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryItems_ChildData(ctx context.Context, field graphql.CollectedField, obj *model.CategoryItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryItems_ChildData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CategoryItems)
	fc.Result = res
	return ec.marshalNCategoryItems2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐCategoryItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryItems_ChildData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_CategoryItems_ID(ctx, field)
			case "Name":
				return ec.fieldContext_CategoryItems_Name(ctx, field)
			case "Description":
				return ec.fieldContext_CategoryItems_Description(ctx, field)
			case "ListOrder":
				return ec.fieldContext_CategoryItems_ListOrder(ctx, field)
			case "Active":
				return ec.fieldContext_CategoryItems_Active(ctx, field)
			case "ParentID":
				return ec.fieldContext_CategoryItems_ParentID(ctx, field)
			case "ChildCount":
				return ec.fieldContext_CategoryItems_ChildCount(ctx, field)
			case "Xp":
				return ec.fieldContext_CategoryItems_Xp(ctx, field)
			case "ChildData":
				return ec.fieldContext_CategoryItems_ChildData(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryItems", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryMeta_Page(ctx context.Context, field graphql.CollectedField, obj *model.CategoryMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryMeta_Page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryMeta_Page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryMeta_PageSize(ctx context.Context, field graphql.CollectedField, obj *model.CategoryMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryMeta_PageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryMeta_PageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryMeta_TotalCount(ctx context.Context, field graphql.CollectedField, obj *model.CategoryMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryMeta_TotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryMeta_TotalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryMeta_TotalPages(ctx context.Context, field graphql.CollectedField, obj *model.CategoryMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryMeta_TotalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryMeta_TotalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryMeta_ItemRange(ctx context.Context, field graphql.CollectedField, obj *model.CategoryMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryMeta_ItemRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*int)
	fc.Result = res
	return ec.marshalNInt2ᚕᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryMeta_ItemRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryMeta_NextPageKey(ctx context.Context, field graphql.CollectedField, obj *model.CategoryMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryMeta_NextPageKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextPageKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryMeta_NextPageKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryResponse_Meta(ctx context.Context, field graphql.CollectedField, obj *model.CategoryResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryResponse_Meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CategoryMeta)
	fc.Result = res
	return ec.marshalNCategoryMeta2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐCategoryMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryResponse_Meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Page":
				return ec.fieldContext_CategoryMeta_Page(ctx, field)
			case "PageSize":
				return ec.fieldContext_CategoryMeta_PageSize(ctx, field)
			case "TotalCount":
				return ec.fieldContext_CategoryMeta_TotalCount(ctx, field)
			case "TotalPages":
				return ec.fieldContext_CategoryMeta_TotalPages(ctx, field)
			case "ItemRange":
				return ec.fieldContext_CategoryMeta_ItemRange(ctx, field)
			case "NextPageKey":
				return ec.fieldContext_CategoryMeta_NextPageKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryResponse_Items(ctx context.Context, field graphql.CollectedField, obj *model.CategoryResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryResponse_Items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CategoryItems)
	fc.Result = res
	return ec.marshalNCategoryItems2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐCategoryItemsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryResponse_Items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_CategoryItems_ID(ctx, field)
			case "Name":
				return ec.fieldContext_CategoryItems_Name(ctx, field)
			case "Description":
				return ec.fieldContext_CategoryItems_Description(ctx, field)
			case "ListOrder":
				return ec.fieldContext_CategoryItems_ListOrder(ctx, field)
			case "Active":
				return ec.fieldContext_CategoryItems_Active(ctx, field)
			case "ParentID":
				return ec.fieldContext_CategoryItems_ParentID(ctx, field)
			case "ChildCount":
				return ec.fieldContext_CategoryItems_ChildCount(ctx, field)
			case "Xp":
				return ec.fieldContext_CategoryItems_Xp(ctx, field)
			case "ChildData":
				return ec.fieldContext_CategoryItems_ChildData(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryItems", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Draft_ID(ctx context.Context, field graphql.CollectedField, obj *model.Draft) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Draft_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Draft_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Draft",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Draft_Status(ctx context.Context, field graphql.CollectedField, obj *model.Draft) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Draft_Status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Draft_Status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Draft",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Draft_RejectionReason(ctx context.Context, field graphql.CollectedField, obj *model.Draft) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Draft_RejectionReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectionReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Draft_RejectionReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Draft",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetBuySku_SKU(ctx context.Context, field graphql.CollectedField, obj *model.GetBuySku) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetBuySku_SKU(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sku, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetBuySku_SKU(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetBuySku",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetBuySku_Qty(ctx context.Context, field graphql.CollectedField, obj *model.GetBuySku) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetBuySku_Qty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetBuySku_Qty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetBuySku",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Inventory_Enabled(ctx context.Context, field graphql.CollectedField, obj *model.Inventory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Inventory_Enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Inventory_Enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Inventory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Inventory_NotificationPoint(ctx context.Context, field graphql.CollectedField, obj *model.Inventory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Inventory_NotificationPoint(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Inventory_NotificationPoint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Inventory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Inventory_VariantLevelTracking(ctx context.Context, field graphql.CollectedField, obj *model.Inventory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Inventory_VariantLevelTracking(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantLevelTracking, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Inventory_VariantLevelTracking(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Inventory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Inventory_OrderCanExceed(ctx context.Context, field graphql.CollectedField, obj *model.Inventory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Inventory_OrderCanExceed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderCanExceed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Inventory_OrderCanExceed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Inventory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Inventory_QuantityAvailable(ctx context.Context, field graphql.CollectedField, obj *model.Inventory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Inventory_QuantityAvailable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityAvailable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Inventory_QuantityAvailable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Inventory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Inventory_LastUpdated(ctx context.Context, field graphql.CollectedField, obj *model.Inventory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Inventory_LastUpdated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Inventory_LastUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Inventory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LatestProductItems_Draft(ctx context.Context, field graphql.CollectedField, obj *model.LatestProductItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LatestProductItems_Draft(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Draft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Draft)
	fc.Result = res
	return ec.marshalODraft2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐDraft(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LatestProductItems_Draft(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LatestProductItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_Draft_ID(ctx, field)
			case "Status":
				return ec.fieldContext_Draft_Status(ctx, field)
			case "RejectionReason":
				return ec.fieldContext_Draft_RejectionReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Draft", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LatestProductItems_Id(ctx context.Context, field graphql.CollectedField, obj *model.LatestProductItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LatestProductItems_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LatestProductItems_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LatestProductItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LatestProductItems_Variants(ctx context.Context, field graphql.CollectedField, obj *model.LatestProductItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LatestProductItems_Variants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LatestProductItems_Variants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LatestProductItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LatestProductItems_Specs(ctx context.Context, field graphql.CollectedField, obj *model.LatestProductItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LatestProductItems_Specs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Specs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LatestProductItems_Specs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LatestProductItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LatestProductItems_PriceSchedule(ctx context.Context, field graphql.CollectedField, obj *model.LatestProductItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LatestProductItems_PriceSchedule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceSchedule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NewProductPriceSchedule)
	fc.Result = res
	return ec.marshalONewProductPriceSchedule2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐNewProductPriceSchedule(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LatestProductItems_PriceSchedule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LatestProductItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "OwnerID":
				return ec.fieldContext_NewProductPriceSchedule_OwnerID(ctx, field)
			case "ID":
				return ec.fieldContext_NewProductPriceSchedule_ID(ctx, field)
			case "Name":
				return ec.fieldContext_NewProductPriceSchedule_Name(ctx, field)
			case "ApplyTax":
				return ec.fieldContext_NewProductPriceSchedule_ApplyTax(ctx, field)
			case "ApplyShipping":
				return ec.fieldContext_NewProductPriceSchedule_ApplyShipping(ctx, field)
			case "MinQuantity":
				return ec.fieldContext_NewProductPriceSchedule_MinQuantity(ctx, field)
			case "MaxQuantity":
				return ec.fieldContext_NewProductPriceSchedule_MaxQuantity(ctx, field)
			case "UseCumulativeQuantity":
				return ec.fieldContext_NewProductPriceSchedule_UseCumulativeQuantity(ctx, field)
			case "RestrictedQuantity":
				return ec.fieldContext_NewProductPriceSchedule_RestrictedQuantity(ctx, field)
			case "Currency":
				return ec.fieldContext_NewProductPriceSchedule_Currency(ctx, field)
			case "SaleStart":
				return ec.fieldContext_NewProductPriceSchedule_SaleStart(ctx, field)
			case "SaleEnd":
				return ec.fieldContext_NewProductPriceSchedule_SaleEnd(ctx, field)
			case "IsOnSale":
				return ec.fieldContext_NewProductPriceSchedule_IsOnSale(ctx, field)
			case "PriceBreaks":
				return ec.fieldContext_NewProductPriceSchedule_PriceBreaks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NewProductPriceSchedule", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LatestProductItems_Product(ctx context.Context, field graphql.CollectedField, obj *model.LatestProductItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LatestProductItems_Product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductItem)
	fc.Result = res
	return ec.marshalOProductItem2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LatestProductItems_Product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LatestProductItems",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "OwnerID":
				return ec.fieldContext_ProductItem_OwnerID(ctx, field)
			case "DefaultPriceScheduleID":
				return ec.fieldContext_ProductItem_DefaultPriceScheduleID(ctx, field)
			case "AutoForward":
				return ec.fieldContext_ProductItem_AutoForward(ctx, field)
			case "ID":
				return ec.fieldContext_ProductItem_ID(ctx, field)
			case "Name":
				return ec.fieldContext_ProductItem_Name(ctx, field)
			case "Description":
				return ec.fieldContext_ProductItem_Description(ctx, field)
			case "QuantityMultiplier":
				return ec.fieldContext_ProductItem_QuantityMultiplier(ctx, field)
			case "ShipWeight":
				return ec.fieldContext_ProductItem_ShipWeight(ctx, field)
			case "ShipHeight":
				return ec.fieldContext_ProductItem_ShipHeight(ctx, field)
			case "ShipWidth":
				return ec.fieldContext_ProductItem_ShipWidth(ctx, field)
			case "ShipLength":
				return ec.fieldContext_ProductItem_ShipLength(ctx, field)
			case "Active":
				return ec.fieldContext_ProductItem_Active(ctx, field)
			case "SpecCount":
				return ec.fieldContext_ProductItem_SpecCount(ctx, field)
			case "VariantCount":
				return ec.fieldContext_ProductItem_VariantCount(ctx, field)
			case "ShipFromAddressID":
				return ec.fieldContext_ProductItem_ShipFromAddressID(ctx, field)
			case "Inventory":
				return ec.fieldContext_ProductItem_Inventory(ctx, field)
			case "DefaultSupplierID":
				return ec.fieldContext_ProductItem_DefaultSupplierID(ctx, field)
			case "AllSuppliersCanSell":
				return ec.fieldContext_ProductItem_AllSuppliersCanSell(ctx, field)
			case "Returnable":
				return ec.fieldContext_ProductItem_Returnable(ctx, field)
			case "XP":
				return ec.fieldContext_ProductItem_XP(ctx, field)
			case "IsFavorite":
				return ec.fieldContext_ProductItem_IsFavorite(ctx, field)
			case "PriceSchedule":
				return ec.fieldContext_ProductItem_PriceSchedule(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_favoriteProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_favoriteProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().FavoriteProduct(rctx, fc.Args["productID"].(string), fc.Args["isFavorite"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserProductFavorite)
	fc.Result = res
	return ec.marshalOUserProductFavorite2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐUserProductFavorite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_favoriteProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_UserProductFavorite_ID(ctx, field)
			case "UserID":
				return ec.fieldContext_UserProductFavorite_UserID(ctx, field)
			case "ProductID":
				return ec.fieldContext_UserProductFavorite_ProductID(ctx, field)
			case "CreatedAt":
				return ec.fieldContext_UserProductFavorite_CreatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserProductFavorite", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_favoriteProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_OwnerID(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_OwnerID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_OwnerID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_ID(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_Name(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_ApplyTax(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_ApplyTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyTax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_ApplyTax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_ApplyShipping(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_ApplyShipping(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyShipping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_ApplyShipping(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_MinQuantity(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_MinQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_MinQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_MaxQuantity(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_MaxQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_MaxQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_UseCumulativeQuantity(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_UseCumulativeQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseCumulativeQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_UseCumulativeQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_RestrictedQuantity(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_RestrictedQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RestrictedQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_RestrictedQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_Currency(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_Currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_Currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_SaleStart(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_SaleStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaleStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_SaleStart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_SaleEnd(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_SaleEnd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaleEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_SaleEnd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_IsOnSale(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_IsOnSale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_IsOnSale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NewProductPriceSchedule_PriceBreaks(ctx context.Context, field graphql.CollectedField, obj *model.NewProductPriceSchedule) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NewProductPriceSchedule_PriceBreaks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceBreaks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PriceBreak)
	fc.Result = res
	return ec.marshalOPriceBreak2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceBreak(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NewProductPriceSchedule_PriceBreaks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NewProductPriceSchedule",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Quantity":
				return ec.fieldContext_PriceBreak_Quantity(ctx, field)
			case "Price":
				return ec.fieldContext_PriceBreak_Price(ctx, field)
			case "SalePrice":
				return ec.fieldContext_PriceBreak_SalePrice(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PriceBreak", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderCloudMeta_Page(ctx context.Context, field graphql.CollectedField, obj *model.OrderCloudMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderCloudMeta_Page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderCloudMeta_Page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderCloudMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderCloudMeta_PageSize(ctx context.Context, field graphql.CollectedField, obj *model.OrderCloudMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderCloudMeta_PageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderCloudMeta_PageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderCloudMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderCloudMeta_TotalCount(ctx context.Context, field graphql.CollectedField, obj *model.OrderCloudMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderCloudMeta_TotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderCloudMeta_TotalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderCloudMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderCloudMeta_TotalPages(ctx context.Context, field graphql.CollectedField, obj *model.OrderCloudMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderCloudMeta_TotalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderCloudMeta_TotalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderCloudMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderCloudMeta_ItemRange(ctx context.Context, field graphql.CollectedField, obj *model.OrderCloudMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderCloudMeta_ItemRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderCloudMeta_ItemRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderCloudMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderCloudMeta_NextPageKey(ctx context.Context, field graphql.CollectedField, obj *model.OrderCloudMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderCloudMeta_NextPageKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextPageKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderCloudMeta_NextPageKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderCloudMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceBreak_Quantity(ctx context.Context, field graphql.CollectedField, obj *model.PriceBreak) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceBreak_Quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceBreak_Quantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceBreak",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceBreak_Price(ctx context.Context, field graphql.CollectedField, obj *model.PriceBreak) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceBreak_Price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceBreak_Price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceBreak",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceBreak_SalePrice(ctx context.Context, field graphql.CollectedField, obj *model.PriceBreak) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceBreak_SalePrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceBreak_SalePrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceBreak",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_OwnerID(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_OwnerID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_OwnerID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_ID(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_Name(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_ApplyTax(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_ApplyTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyTax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_ApplyTax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_ApplyShipping(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_ApplyShipping(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplyShipping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_ApplyShipping(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_MinQuantity(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_MinQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_MinQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_MaxQuantity(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_MaxQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_MaxQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_UseCumulativeQuantity(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_UseCumulativeQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseCumulativeQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_UseCumulativeQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_RestrictedQuantity(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_RestrictedQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RestrictedQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_RestrictedQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_PriceBreaks(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_PriceBreaks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceBreaks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PriceBreak)
	fc.Result = res
	return ec.marshalOPriceBreak2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceBreak(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_PriceBreaks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Quantity":
				return ec.fieldContext_PriceBreak_Quantity(ctx, field)
			case "Price":
				return ec.fieldContext_PriceBreak_Price(ctx, field)
			case "SalePrice":
				return ec.fieldContext_PriceBreak_SalePrice(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PriceBreak", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_Currency(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_Currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_Currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_SaleStart(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_SaleStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaleStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_SaleStart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_SaleEnd(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_SaleEnd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaleEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_SaleEnd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_IsOnSale(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_IsOnSale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_IsOnSale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleItem_XP(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleItem_XP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PriceScheduleXp)
	fc.Result = res
	return ec.marshalOPriceScheduleXP2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceScheduleXp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleItem_XP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Type":
				return ec.fieldContext_PriceScheduleXP_Type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PriceScheduleXP", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleResponse_Meta(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleResponse_Meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrderCloudMeta)
	fc.Result = res
	return ec.marshalOOrderCloudMeta2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐOrderCloudMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleResponse_Meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Page":
				return ec.fieldContext_OrderCloudMeta_Page(ctx, field)
			case "PageSize":
				return ec.fieldContext_OrderCloudMeta_PageSize(ctx, field)
			case "TotalCount":
				return ec.fieldContext_OrderCloudMeta_TotalCount(ctx, field)
			case "TotalPages":
				return ec.fieldContext_OrderCloudMeta_TotalPages(ctx, field)
			case "ItemRange":
				return ec.fieldContext_OrderCloudMeta_ItemRange(ctx, field)
			case "NextPageKey":
				return ec.fieldContext_OrderCloudMeta_NextPageKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrderCloudMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleResponse_Items(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleResponse_Items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PriceScheduleItem)
	fc.Result = res
	return ec.marshalOPriceScheduleItem2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceScheduleItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleResponse_Items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "OwnerID":
				return ec.fieldContext_PriceScheduleItem_OwnerID(ctx, field)
			case "ID":
				return ec.fieldContext_PriceScheduleItem_ID(ctx, field)
			case "Name":
				return ec.fieldContext_PriceScheduleItem_Name(ctx, field)
			case "ApplyTax":
				return ec.fieldContext_PriceScheduleItem_ApplyTax(ctx, field)
			case "ApplyShipping":
				return ec.fieldContext_PriceScheduleItem_ApplyShipping(ctx, field)
			case "MinQuantity":
				return ec.fieldContext_PriceScheduleItem_MinQuantity(ctx, field)
			case "MaxQuantity":
				return ec.fieldContext_PriceScheduleItem_MaxQuantity(ctx, field)
			case "UseCumulativeQuantity":
				return ec.fieldContext_PriceScheduleItem_UseCumulativeQuantity(ctx, field)
			case "RestrictedQuantity":
				return ec.fieldContext_PriceScheduleItem_RestrictedQuantity(ctx, field)
			case "PriceBreaks":
				return ec.fieldContext_PriceScheduleItem_PriceBreaks(ctx, field)
			case "Currency":
				return ec.fieldContext_PriceScheduleItem_Currency(ctx, field)
			case "SaleStart":
				return ec.fieldContext_PriceScheduleItem_SaleStart(ctx, field)
			case "SaleEnd":
				return ec.fieldContext_PriceScheduleItem_SaleEnd(ctx, field)
			case "IsOnSale":
				return ec.fieldContext_PriceScheduleItem_IsOnSale(ctx, field)
			case "XP":
				return ec.fieldContext_PriceScheduleItem_XP(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PriceScheduleItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PriceScheduleXP_Type(ctx context.Context, field graphql.CollectedField, obj *model.PriceScheduleXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PriceScheduleXP_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PriceScheduleXP_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PriceScheduleXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductBatch_BatchNumber(ctx context.Context, field graphql.CollectedField, obj *model.ProductBatch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductBatch_BatchNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BatchNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductBatch_BatchNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductBatch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductBatch_BatchExpirationDate(ctx context.Context, field graphql.CollectedField, obj *model.ProductBatch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductBatch_BatchExpirationDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BatchExpirationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductBatch_BatchExpirationDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductBatch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductBatch_BatchStockQuantity(ctx context.Context, field graphql.CollectedField, obj *model.ProductBatch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductBatch_BatchStockQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BatchStockQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductBatch_BatchStockQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductBatch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductDocument_FileName(ctx context.Context, field graphql.CollectedField, obj *model.ProductDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductDocument_FileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductDocument_FileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductDocument_Url(ctx context.Context, field graphql.CollectedField, obj *model.ProductDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductDocument_Url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductDocument_Url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductFacet_Supplier(ctx context.Context, field graphql.CollectedField, obj *model.ProductFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductFacet_Supplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductFacet_Supplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductFacet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductFilter_filterKey(ctx context.Context, field graphql.CollectedField, obj *model.ProductFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductFilter_filterKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductFilter_filterKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductFilter_filterCount(ctx context.Context, field graphql.CollectedField, obj *model.ProductFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductFilter_filterCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductFilter_filterCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductImage_ThumbnailUrl(ctx context.Context, field graphql.CollectedField, obj *model.ProductImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductImage_ThumbnailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductImage_ThumbnailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductImage_Url(ctx context.Context, field graphql.CollectedField, obj *model.ProductImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductImage_Url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductImage_Url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductImage_Tags(ctx context.Context, field graphql.CollectedField, obj *model.ProductImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductImage_Tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductImage_Tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_OwnerID(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_OwnerID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_OwnerID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_DefaultPriceScheduleID(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_DefaultPriceScheduleID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultPriceScheduleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_DefaultPriceScheduleID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_AutoForward(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_AutoForward(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoForward, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_AutoForward(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_ID(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_Name(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_Description(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_Description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_Description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_QuantityMultiplier(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_QuantityMultiplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityMultiplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_QuantityMultiplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_ShipWeight(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_ShipWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_ShipWeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_ShipHeight(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_ShipHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipHeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_ShipHeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_ShipWidth(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_ShipWidth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipWidth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_ShipWidth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_ShipLength(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_ShipLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_ShipLength(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_Active(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_Active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_Active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_SpecCount(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_SpecCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_SpecCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_VariantCount(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_VariantCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_VariantCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_ShipFromAddressID(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_ShipFromAddressID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipFromAddressID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_ShipFromAddressID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_Inventory(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_Inventory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Inventory)
	fc.Result = res
	return ec.marshalOInventory2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐInventory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_Inventory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Enabled":
				return ec.fieldContext_Inventory_Enabled(ctx, field)
			case "NotificationPoint":
				return ec.fieldContext_Inventory_NotificationPoint(ctx, field)
			case "VariantLevelTracking":
				return ec.fieldContext_Inventory_VariantLevelTracking(ctx, field)
			case "OrderCanExceed":
				return ec.fieldContext_Inventory_OrderCanExceed(ctx, field)
			case "QuantityAvailable":
				return ec.fieldContext_Inventory_QuantityAvailable(ctx, field)
			case "LastUpdated":
				return ec.fieldContext_Inventory_LastUpdated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Inventory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_DefaultSupplierID(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_DefaultSupplierID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultSupplierID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_DefaultSupplierID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_AllSuppliersCanSell(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_AllSuppliersCanSell(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllSuppliersCanSell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_AllSuppliersCanSell(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_Returnable(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_Returnable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returnable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_Returnable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_XP(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_XP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductXp)
	fc.Result = res
	return ec.marshalOProductXP2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductXp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_XP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Company":
				return ec.fieldContext_ProductXP_Company(ctx, field)
			case "Status":
				return ec.fieldContext_ProductXP_Status(ctx, field)
			case "ArtworkRequired":
				return ec.fieldContext_ProductXP_ArtworkRequired(ctx, field)
			case "ProductRegistrationNumber":
				return ec.fieldContext_ProductXP_ProductRegistrationNumber(ctx, field)
			case "Facets":
				return ec.fieldContext_ProductXP_Facets(ctx, field)
			case "Manufacturer":
				return ec.fieldContext_ProductXP_Manufacturer(ctx, field)
			case "FreeShipping":
				return ec.fieldContext_ProductXP_FreeShipping(ctx, field)
			case "UnitOfMeasure":
				return ec.fieldContext_ProductXP_UnitOfMeasure(ctx, field)
			case "Images":
				return ec.fieldContext_ProductXP_Images(ctx, field)
			case "ProductType":
				return ec.fieldContext_ProductXP_ProductType(ctx, field)
			case "CountryOfOrigin":
				return ec.fieldContext_ProductXP_CountryOfOrigin(ctx, field)
			case "PromotionEligible":
				return ec.fieldContext_ProductXP_PromotionEligible(ctx, field)
			case "PromotionExists":
				return ec.fieldContext_ProductXP_PromotionExists(ctx, field)
			case "Workflow":
				return ec.fieldContext_ProductXP_Workflow(ctx, field)
			case "ProductBatch":
				return ec.fieldContext_ProductXP_ProductBatch(ctx, field)
			case "Tax":
				return ec.fieldContext_ProductXP_Tax(ctx, field)
			case "TherapeuticClass":
				return ec.fieldContext_ProductXP_TherapeuticClass(ctx, field)
			case "HasVariants":
				return ec.fieldContext_ProductXP_HasVariants(ctx, field)
			case "Accessorials":
				return ec.fieldContext_ProductXP_Accessorials(ctx, field)
			case "FreeShippingMessage":
				return ec.fieldContext_ProductXP_FreeShippingMessage(ctx, field)
			case "IsResale":
				return ec.fieldContext_ProductXP_IsResale(ctx, field)
			case "Brand":
				return ec.fieldContext_ProductXP_Brand(ctx, field)
			case "CustomerRating":
				return ec.fieldContext_ProductXP_CustomerRating(ctx, field)
			case "SizeTier":
				return ec.fieldContext_ProductXP_SizeTier(ctx, field)
			case "IntegrationData":
				return ec.fieldContext_ProductXP_IntegrationData(ctx, field)
			case "Notes":
				return ec.fieldContext_ProductXP_Notes(ctx, field)
			case "Currency":
				return ec.fieldContext_ProductXP_Currency(ctx, field)
			case "Documents":
				return ec.fieldContext_ProductXP_Documents(ctx, field)
			case "Promotions":
				return ec.fieldContext_ProductXP_Promotions(ctx, field)
			case "SupplierImage":
				return ec.fieldContext_ProductXP_SupplierImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductXP", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_IsFavorite(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_IsFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFavorite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_IsFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductItem_PriceSchedule(ctx context.Context, field graphql.CollectedField, obj *model.ProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductItem_PriceSchedule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceSchedule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PriceScheduleItem)
	fc.Result = res
	return ec.marshalOPriceScheduleItem2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceScheduleItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductItem_PriceSchedule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "OwnerID":
				return ec.fieldContext_PriceScheduleItem_OwnerID(ctx, field)
			case "ID":
				return ec.fieldContext_PriceScheduleItem_ID(ctx, field)
			case "Name":
				return ec.fieldContext_PriceScheduleItem_Name(ctx, field)
			case "ApplyTax":
				return ec.fieldContext_PriceScheduleItem_ApplyTax(ctx, field)
			case "ApplyShipping":
				return ec.fieldContext_PriceScheduleItem_ApplyShipping(ctx, field)
			case "MinQuantity":
				return ec.fieldContext_PriceScheduleItem_MinQuantity(ctx, field)
			case "MaxQuantity":
				return ec.fieldContext_PriceScheduleItem_MaxQuantity(ctx, field)
			case "UseCumulativeQuantity":
				return ec.fieldContext_PriceScheduleItem_UseCumulativeQuantity(ctx, field)
			case "RestrictedQuantity":
				return ec.fieldContext_PriceScheduleItem_RestrictedQuantity(ctx, field)
			case "PriceBreaks":
				return ec.fieldContext_PriceScheduleItem_PriceBreaks(ctx, field)
			case "Currency":
				return ec.fieldContext_PriceScheduleItem_Currency(ctx, field)
			case "SaleStart":
				return ec.fieldContext_PriceScheduleItem_SaleStart(ctx, field)
			case "SaleEnd":
				return ec.fieldContext_PriceScheduleItem_SaleEnd(ctx, field)
			case "IsOnSale":
				return ec.fieldContext_PriceScheduleItem_IsOnSale(ctx, field)
			case "XP":
				return ec.fieldContext_PriceScheduleItem_XP(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PriceScheduleItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMeta_Facets(ctx context.Context, field graphql.CollectedField, obj *model.ProductMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMeta_Facets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMeta_Facets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMeta_Page(ctx context.Context, field graphql.CollectedField, obj *model.ProductMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMeta_Page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMeta_Page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMeta_PageSize(ctx context.Context, field graphql.CollectedField, obj *model.ProductMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMeta_PageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMeta_PageSize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMeta_TotalCount(ctx context.Context, field graphql.CollectedField, obj *model.ProductMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMeta_TotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMeta_TotalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMeta_TotalPages(ctx context.Context, field graphql.CollectedField, obj *model.ProductMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMeta_TotalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMeta_TotalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMeta_ItemRange(ctx context.Context, field graphql.CollectedField, obj *model.ProductMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMeta_ItemRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMeta_ItemRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductMeta_NextPageKey(ctx context.Context, field graphql.CollectedField, obj *model.ProductMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductMeta_NextPageKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextPageKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductMeta_NextPageKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_ID(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_LineItemLevel(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_LineItemLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LineItemLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_LineItemLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_Code(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_Name(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_RedemptionLimit(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_RedemptionLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedemptionLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_RedemptionLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_RedemptionLimitPerUser(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_RedemptionLimitPerUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedemptionLimitPerUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_RedemptionLimitPerUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_RedemptionCount(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_RedemptionCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedemptionCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_RedemptionCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_Description(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_Description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_Description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_FinePrint(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_FinePrint(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinePrint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_FinePrint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_StartDate(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_StartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_StartDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_ExpirationDate(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_ExpirationDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpirationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_ExpirationDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_EligibleExpression(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_EligibleExpression(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EligibleExpression, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_EligibleExpression(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_ValueExpression(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_ValueExpression(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueExpression, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_ValueExpression(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_CanCombine(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_CanCombine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanCombine, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_CanCombine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_AllowAllBuyers(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_AllowAllBuyers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowAllBuyers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_AllowAllBuyers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_OwnerID(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_OwnerID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_OwnerID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotions_xp(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotions_xp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Xp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductPromotionsXp)
	fc.Result = res
	return ec.marshalOProductPromotionsXp2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotionsXp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotions_xp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Type":
				return ec.fieldContext_ProductPromotionsXp_Type(ctx, field)
			case "Value":
				return ec.fieldContext_ProductPromotionsXp_Value(ctx, field)
			case "AppliesTo":
				return ec.fieldContext_ProductPromotionsXp_AppliesTo(ctx, field)
			case "ScopeToSupplier":
				return ec.fieldContext_ProductPromotionsXp_ScopeToSupplier(ctx, field)
			case "Supplier":
				return ec.fieldContext_ProductPromotionsXp_Supplier(ctx, field)
			case "Automatic":
				return ec.fieldContext_ProductPromotionsXp_Automatic(ctx, field)
			case "MaxShipCost":
				return ec.fieldContext_ProductPromotionsXp_MaxShipCost(ctx, field)
			case "Buyers":
				return ec.fieldContext_ProductPromotionsXp_Buyers(ctx, field)
			case "BOGO":
				return ec.fieldContext_ProductPromotionsXp_BOGO(ctx, field)
			case "MinReq":
				return ec.fieldContext_ProductPromotionsXp_MinReq(ctx, field)
			case "SKUs":
				return ec.fieldContext_ProductPromotionsXp_SKUs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductPromotionsXp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_Type(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_Value(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_Value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_Value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_AppliesTo(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_AppliesTo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliesTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_AppliesTo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_ScopeToSupplier(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_ScopeToSupplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScopeToSupplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_ScopeToSupplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_Supplier(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_Supplier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_Supplier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_Automatic(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_Automatic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Automatic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_Automatic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_MaxShipCost(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_MaxShipCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxShipCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_MaxShipCost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_Buyers(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_Buyers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Buyers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_Buyers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_BOGO(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_BOGO(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bogo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductPromotionsXpBogo)
	fc.Result = res
	return ec.marshalOProductPromotionsXpBogo2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotionsXpBogo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_BOGO(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Type":
				return ec.fieldContext_ProductPromotionsXpBogo_Type(ctx, field)
			case "Value":
				return ec.fieldContext_ProductPromotionsXpBogo_Value(ctx, field)
			case "GetSKU":
				return ec.fieldContext_ProductPromotionsXpBogo_GetSKU(ctx, field)
			case "BuySKU":
				return ec.fieldContext_ProductPromotionsXpBogo_BuySKU(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductPromotionsXpBogo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_MinReq(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_MinReq(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinReq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductPromotionsXpMinReq)
	fc.Result = res
	return ec.marshalOProductPromotionsXpMinReq2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotionsXpMinReq(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_MinReq(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Type":
				return ec.fieldContext_ProductPromotionsXpMinReq_Type(ctx, field)
			case "Int":
				return ec.fieldContext_ProductPromotionsXpMinReq_Int(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductPromotionsXpMinReq", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXp_SKUs(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXp_SKUs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SKUs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXp_SKUs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXpBogo_Type(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXpBogo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXpBogo_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXpBogo_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXpBogo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXpBogo_Value(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXpBogo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXpBogo_Value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXpBogo_Value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXpBogo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXpBogo_GetSKU(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXpBogo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXpBogo_GetSKU(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetSku, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetBuySku)
	fc.Result = res
	return ec.marshalOGetBuySku2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐGetBuySku(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXpBogo_GetSKU(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXpBogo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "SKU":
				return ec.fieldContext_GetBuySku_SKU(ctx, field)
			case "Qty":
				return ec.fieldContext_GetBuySku_Qty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetBuySku", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXpBogo_BuySKU(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXpBogo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXpBogo_BuySKU(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuySku, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetBuySku)
	fc.Result = res
	return ec.marshalOGetBuySku2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐGetBuySku(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXpBogo_BuySKU(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXpBogo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "SKU":
				return ec.fieldContext_GetBuySku_SKU(ctx, field)
			case "Qty":
				return ec.fieldContext_GetBuySku_Qty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetBuySku", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXpMinReq_Type(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXpMinReq) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXpMinReq_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXpMinReq_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXpMinReq",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductPromotionsXpMinReq_Int(ctx context.Context, field graphql.CollectedField, obj *model.ProductPromotionsXpMinReq) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductPromotionsXpMinReq_Int(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Int, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductPromotionsXpMinReq_Int(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductPromotionsXpMinReq",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductResponse_Meta(ctx context.Context, field graphql.CollectedField, obj *model.ProductResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductResponse_Meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductMeta)
	fc.Result = res
	return ec.marshalOProductMeta2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductResponse_Meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Facets":
				return ec.fieldContext_ProductMeta_Facets(ctx, field)
			case "Page":
				return ec.fieldContext_ProductMeta_Page(ctx, field)
			case "PageSize":
				return ec.fieldContext_ProductMeta_PageSize(ctx, field)
			case "TotalCount":
				return ec.fieldContext_ProductMeta_TotalCount(ctx, field)
			case "TotalPages":
				return ec.fieldContext_ProductMeta_TotalPages(ctx, field)
			case "ItemRange":
				return ec.fieldContext_ProductMeta_ItemRange(ctx, field)
			case "NextPageKey":
				return ec.fieldContext_ProductMeta_NextPageKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductResponse_Items(ctx context.Context, field graphql.CollectedField, obj *model.ProductResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductResponse_Items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductItem)
	fc.Result = res
	return ec.marshalOProductItem2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductResponse_Items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "OwnerID":
				return ec.fieldContext_ProductItem_OwnerID(ctx, field)
			case "DefaultPriceScheduleID":
				return ec.fieldContext_ProductItem_DefaultPriceScheduleID(ctx, field)
			case "AutoForward":
				return ec.fieldContext_ProductItem_AutoForward(ctx, field)
			case "ID":
				return ec.fieldContext_ProductItem_ID(ctx, field)
			case "Name":
				return ec.fieldContext_ProductItem_Name(ctx, field)
			case "Description":
				return ec.fieldContext_ProductItem_Description(ctx, field)
			case "QuantityMultiplier":
				return ec.fieldContext_ProductItem_QuantityMultiplier(ctx, field)
			case "ShipWeight":
				return ec.fieldContext_ProductItem_ShipWeight(ctx, field)
			case "ShipHeight":
				return ec.fieldContext_ProductItem_ShipHeight(ctx, field)
			case "ShipWidth":
				return ec.fieldContext_ProductItem_ShipWidth(ctx, field)
			case "ShipLength":
				return ec.fieldContext_ProductItem_ShipLength(ctx, field)
			case "Active":
				return ec.fieldContext_ProductItem_Active(ctx, field)
			case "SpecCount":
				return ec.fieldContext_ProductItem_SpecCount(ctx, field)
			case "VariantCount":
				return ec.fieldContext_ProductItem_VariantCount(ctx, field)
			case "ShipFromAddressID":
				return ec.fieldContext_ProductItem_ShipFromAddressID(ctx, field)
			case "Inventory":
				return ec.fieldContext_ProductItem_Inventory(ctx, field)
			case "DefaultSupplierID":
				return ec.fieldContext_ProductItem_DefaultSupplierID(ctx, field)
			case "AllSuppliersCanSell":
				return ec.fieldContext_ProductItem_AllSuppliersCanSell(ctx, field)
			case "Returnable":
				return ec.fieldContext_ProductItem_Returnable(ctx, field)
			case "XP":
				return ec.fieldContext_ProductItem_XP(ctx, field)
			case "IsFavorite":
				return ec.fieldContext_ProductItem_IsFavorite(ctx, field)
			case "PriceSchedule":
				return ec.fieldContext_ProductItem_PriceSchedule(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductResponseV2_Meta(ctx context.Context, field graphql.CollectedField, obj *model.ProductResponseV2) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductResponseV2_Meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductMeta)
	fc.Result = res
	return ec.marshalOProductMeta2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductResponseV2_Meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductResponseV2",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Facets":
				return ec.fieldContext_ProductMeta_Facets(ctx, field)
			case "Page":
				return ec.fieldContext_ProductMeta_Page(ctx, field)
			case "PageSize":
				return ec.fieldContext_ProductMeta_PageSize(ctx, field)
			case "TotalCount":
				return ec.fieldContext_ProductMeta_TotalCount(ctx, field)
			case "TotalPages":
				return ec.fieldContext_ProductMeta_TotalPages(ctx, field)
			case "ItemRange":
				return ec.fieldContext_ProductMeta_ItemRange(ctx, field)
			case "NextPageKey":
				return ec.fieldContext_ProductMeta_NextPageKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductResponseV2_Items(ctx context.Context, field graphql.CollectedField, obj *model.ProductResponseV2) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductResponseV2_Items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LatestProductItems)
	fc.Result = res
	return ec.marshalOLatestProductItems2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐLatestProductItems(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductResponseV2_Items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductResponseV2",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Draft":
				return ec.fieldContext_LatestProductItems_Draft(ctx, field)
			case "Id":
				return ec.fieldContext_LatestProductItems_Id(ctx, field)
			case "Variants":
				return ec.fieldContext_LatestProductItems_Variants(ctx, field)
			case "Specs":
				return ec.fieldContext_LatestProductItems_Specs(ctx, field)
			case "PriceSchedule":
				return ec.fieldContext_LatestProductItems_PriceSchedule(ctx, field)
			case "Product":
				return ec.fieldContext_LatestProductItems_Product(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LatestProductItems", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductTax_Description(ctx context.Context, field graphql.CollectedField, obj *model.ProductTax) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductTax_Description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductTax_Description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductTax",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductTax_LongDescription(ctx context.Context, field graphql.CollectedField, obj *model.ProductTax) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductTax_LongDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LongDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductTax_LongDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductTax",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductTax_Code(ctx context.Context, field graphql.CollectedField, obj *model.ProductTax) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductTax_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductTax_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductTax",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Company(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Company(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Status(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_ArtworkRequired(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_ArtworkRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtworkRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_ArtworkRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_ProductRegistrationNumber(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_ProductRegistrationNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductRegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_ProductRegistrationNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Facets(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Facets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductFacet)
	fc.Result = res
	return ec.marshalOProductFacet2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductFacet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Facets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Supplier":
				return ec.fieldContext_ProductFacet_Supplier(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductFacet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Manufacturer(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Manufacturer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Manufacturer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Manufacturer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_FreeShipping(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_FreeShipping(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreeShipping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_FreeShipping(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_UnitOfMeasure(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_UnitOfMeasure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitOfMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UnitOfMeasure)
	fc.Result = res
	return ec.marshalOUnitOfMeasure2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐUnitOfMeasure(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_UnitOfMeasure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Qty":
				return ec.fieldContext_UnitOfMeasure_Qty(ctx, field)
			case "Unit":
				return ec.fieldContext_UnitOfMeasure_Unit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UnitOfMeasure", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Images(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductImage)
	fc.Result = res
	return ec.marshalOProductImage2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Images(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ThumbnailUrl":
				return ec.fieldContext_ProductImage_ThumbnailUrl(ctx, field)
			case "Url":
				return ec.fieldContext_ProductImage_Url(ctx, field)
			case "Tags":
				return ec.fieldContext_ProductImage_Tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_ProductType(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_ProductType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_ProductType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_CountryOfOrigin(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_CountryOfOrigin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryOfOrigin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_CountryOfOrigin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_PromotionEligible(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_PromotionEligible(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromotionEligible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_PromotionEligible(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_PromotionExists(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_PromotionExists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromotionExists, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_PromotionExists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Workflow(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Workflow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Workflow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Workflow)
	fc.Result = res
	return ec.marshalOWorkflow2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐWorkflow(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Workflow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "RejectionReasons":
				return ec.fieldContext_Workflow_RejectionReasons(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workflow", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_ProductBatch(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_ProductBatch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductBatch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductBatch)
	fc.Result = res
	return ec.marshalOProductBatch2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductBatch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_ProductBatch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "BatchNumber":
				return ec.fieldContext_ProductBatch_BatchNumber(ctx, field)
			case "BatchExpirationDate":
				return ec.fieldContext_ProductBatch_BatchExpirationDate(ctx, field)
			case "BatchStockQuantity":
				return ec.fieldContext_ProductBatch_BatchStockQuantity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductBatch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Tax(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Tax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductTax)
	fc.Result = res
	return ec.marshalOProductTax2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductTax(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Tax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Description":
				return ec.fieldContext_ProductTax_Description(ctx, field)
			case "LongDescription":
				return ec.fieldContext_ProductTax_LongDescription(ctx, field)
			case "Code":
				return ec.fieldContext_ProductTax_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductTax", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_TherapeuticClass(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_TherapeuticClass(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TherapeuticClass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_TherapeuticClass(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_HasVariants(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_HasVariants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasVariants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_HasVariants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Accessorials(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Accessorials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Accessorials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Accessorials(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_FreeShippingMessage(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_FreeShippingMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreeShippingMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_FreeShippingMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_IsResale(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_IsResale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsResale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_IsResale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Brand(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Brand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Brand(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_CustomerRating(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_CustomerRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_CustomerRating(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_SizeTier(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_SizeTier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeTier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_SizeTier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_IntegrationData(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_IntegrationData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegrationData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_IntegrationData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Notes(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Notes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Notes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Currency(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Documents(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Documents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductDocument)
	fc.Result = res
	return ec.marshalOProductDocument2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Documents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "FileName":
				return ec.fieldContext_ProductDocument_FileName(ctx, field)
			case "Url":
				return ec.fieldContext_ProductDocument_Url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_Promotions(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_Promotions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductPromotions)
	fc.Result = res
	return ec.marshalOProductPromotions2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_Promotions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_ProductPromotions_ID(ctx, field)
			case "LineItemLevel":
				return ec.fieldContext_ProductPromotions_LineItemLevel(ctx, field)
			case "Code":
				return ec.fieldContext_ProductPromotions_Code(ctx, field)
			case "Name":
				return ec.fieldContext_ProductPromotions_Name(ctx, field)
			case "RedemptionLimit":
				return ec.fieldContext_ProductPromotions_RedemptionLimit(ctx, field)
			case "RedemptionLimitPerUser":
				return ec.fieldContext_ProductPromotions_RedemptionLimitPerUser(ctx, field)
			case "RedemptionCount":
				return ec.fieldContext_ProductPromotions_RedemptionCount(ctx, field)
			case "Description":
				return ec.fieldContext_ProductPromotions_Description(ctx, field)
			case "FinePrint":
				return ec.fieldContext_ProductPromotions_FinePrint(ctx, field)
			case "StartDate":
				return ec.fieldContext_ProductPromotions_StartDate(ctx, field)
			case "ExpirationDate":
				return ec.fieldContext_ProductPromotions_ExpirationDate(ctx, field)
			case "EligibleExpression":
				return ec.fieldContext_ProductPromotions_EligibleExpression(ctx, field)
			case "ValueExpression":
				return ec.fieldContext_ProductPromotions_ValueExpression(ctx, field)
			case "CanCombine":
				return ec.fieldContext_ProductPromotions_CanCombine(ctx, field)
			case "AllowAllBuyers":
				return ec.fieldContext_ProductPromotions_AllowAllBuyers(ctx, field)
			case "OwnerID":
				return ec.fieldContext_ProductPromotions_OwnerID(ctx, field)
			case "xp":
				return ec.fieldContext_ProductPromotions_xp(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductPromotions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductXP_SupplierImage(ctx context.Context, field graphql.CollectedField, obj *model.ProductXp) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductXP_SupplierImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupplierImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductXP_SupplierImage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductXP",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_productsV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_productsV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProductsV2(rctx, fc.Args["catalogID"].(*string), fc.Args["categoryID"].(*string), fc.Args["supplierID"].(*string), fc.Args["isFavorite"].(*bool), fc.Args["search"].(*string), fc.Args["page"].(*string), fc.Args["pageSize"].(*string), fc.Args["sortBy"].(*string), fc.Args["extraFilters"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductResponseV2)
	fc.Result = res
	return ec.marshalOProductResponseV22ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductResponseV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_productsV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Meta":
				return ec.fieldContext_ProductResponseV2_Meta(ctx, field)
			case "Items":
				return ec.fieldContext_ProductResponseV2_Items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductResponseV2", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_productsV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_products(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Products(rctx, fc.Args["catalogID"].(*string), fc.Args["categoryID"].(*string), fc.Args["supplierID"].(*string), fc.Args["isFavorite"].(*bool), fc.Args["search"].(*string), fc.Args["page"].(*string), fc.Args["pageSize"].(*string), fc.Args["sortBy"].(*string), fc.Args["extraFilters"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductResponse)
	fc.Result = res
	return ec.marshalOProductResponse2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_products(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Meta":
				return ec.fieldContext_ProductResponse_Meta(ctx, field)
			case "Items":
				return ec.fieldContext_ProductResponse_Items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_products_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_similarProducts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_similarProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SimilarProducts(rctx, fc.Args["productID"].(string), fc.Args["page"].(*string), fc.Args["pageSize"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductResponse)
	fc.Result = res
	return ec.marshalOProductResponse2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_similarProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Meta":
				return ec.fieldContext_ProductResponse_Meta(ctx, field)
			case "Items":
				return ec.fieldContext_ProductResponse_Items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_similarProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_recommendProducts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_recommendProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecommendProducts(rctx, fc.Args["productID"].(string), fc.Args["page"].(*string), fc.Args["pageSize"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductResponseV2)
	fc.Result = res
	return ec.marshalOProductResponseV22ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductResponseV2(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_recommendProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Meta":
				return ec.fieldContext_ProductResponseV2_Meta(ctx, field)
			case "Items":
				return ec.fieldContext_ProductResponseV2_Items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductResponseV2", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_recommendProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_product(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Product(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductItem)
	fc.Result = res
	return ec.marshalOProductItem2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "OwnerID":
				return ec.fieldContext_ProductItem_OwnerID(ctx, field)
			case "DefaultPriceScheduleID":
				return ec.fieldContext_ProductItem_DefaultPriceScheduleID(ctx, field)
			case "AutoForward":
				return ec.fieldContext_ProductItem_AutoForward(ctx, field)
			case "ID":
				return ec.fieldContext_ProductItem_ID(ctx, field)
			case "Name":
				return ec.fieldContext_ProductItem_Name(ctx, field)
			case "Description":
				return ec.fieldContext_ProductItem_Description(ctx, field)
			case "QuantityMultiplier":
				return ec.fieldContext_ProductItem_QuantityMultiplier(ctx, field)
			case "ShipWeight":
				return ec.fieldContext_ProductItem_ShipWeight(ctx, field)
			case "ShipHeight":
				return ec.fieldContext_ProductItem_ShipHeight(ctx, field)
			case "ShipWidth":
				return ec.fieldContext_ProductItem_ShipWidth(ctx, field)
			case "ShipLength":
				return ec.fieldContext_ProductItem_ShipLength(ctx, field)
			case "Active":
				return ec.fieldContext_ProductItem_Active(ctx, field)
			case "SpecCount":
				return ec.fieldContext_ProductItem_SpecCount(ctx, field)
			case "VariantCount":
				return ec.fieldContext_ProductItem_VariantCount(ctx, field)
			case "ShipFromAddressID":
				return ec.fieldContext_ProductItem_ShipFromAddressID(ctx, field)
			case "Inventory":
				return ec.fieldContext_ProductItem_Inventory(ctx, field)
			case "DefaultSupplierID":
				return ec.fieldContext_ProductItem_DefaultSupplierID(ctx, field)
			case "AllSuppliersCanSell":
				return ec.fieldContext_ProductItem_AllSuppliersCanSell(ctx, field)
			case "Returnable":
				return ec.fieldContext_ProductItem_Returnable(ctx, field)
			case "XP":
				return ec.fieldContext_ProductItem_XP(ctx, field)
			case "IsFavorite":
				return ec.fieldContext_ProductItem_IsFavorite(ctx, field)
			case "PriceSchedule":
				return ec.fieldContext_ProductItem_PriceSchedule(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_product_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_productV2(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_productV2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProductV2(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LatestProductItems)
	fc.Result = res
	return ec.marshalOLatestProductItems2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐLatestProductItems(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_productV2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Draft":
				return ec.fieldContext_LatestProductItems_Draft(ctx, field)
			case "Id":
				return ec.fieldContext_LatestProductItems_Id(ctx, field)
			case "Variants":
				return ec.fieldContext_LatestProductItems_Variants(ctx, field)
			case "Specs":
				return ec.fieldContext_LatestProductItems_Specs(ctx, field)
			case "PriceSchedule":
				return ec.fieldContext_LatestProductItems_PriceSchedule(ctx, field)
			case "Product":
				return ec.fieldContext_LatestProductItems_Product(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LatestProductItems", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_productV2_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_priceSchedules(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_priceSchedules(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PriceSchedules(rctx, fc.Args["productID"].(string), fc.Args["page"].(*string), fc.Args["pageSize"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PriceScheduleResponse)
	fc.Result = res
	return ec.marshalOPriceScheduleResponse2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceScheduleResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_priceSchedules(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Meta":
				return ec.fieldContext_PriceScheduleResponse_Meta(ctx, field)
			case "Items":
				return ec.fieldContext_PriceScheduleResponse_Items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PriceScheduleResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_priceSchedules_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_categories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Categories(rctx, fc.Args["catalogID"].(*string), fc.Args["depth"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CategoryResponse)
	fc.Result = res
	return ec.marshalOCategoryResponse2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐCategoryResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Meta":
				return ec.fieldContext_CategoryResponse_Meta(ctx, field)
			case "Items":
				return ec.fieldContext_CategoryResponse_Items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_categories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_trendingProducts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trendingProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrendingProducts(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProductResponse)
	fc.Result = res
	return ec.marshalOProductResponse2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trendingProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Meta":
				return ec.fieldContext_ProductResponse_Meta(ctx, field)
			case "Items":
				return ec.fieldContext_ProductResponse_Items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProductFilter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getProductFilter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetProductFilter(rctx, fc.Args["Search"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductFilter)
	fc.Result = res
	return ec.marshalOProductFilter2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductFilter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getProductFilter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "filterKey":
				return ec.fieldContext_ProductFilter_filterKey(ctx, field)
			case "filterCount":
				return ec.fieldContext_ProductFilter_filterCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductFilter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getProductFilter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_recentSearches(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_recentSearches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecentSearches(rctx, fc.Args["page"].(*string), fc.Args["pageSize"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RecentSearch)
	fc.Result = res
	return ec.marshalORecentSearch2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐRecentSearch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_recentSearches(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_RecentSearch_ID(ctx, field)
			case "UserID":
				return ec.fieldContext_RecentSearch_UserID(ctx, field)
			case "SearchKeyword":
				return ec.fieldContext_RecentSearch_SearchKeyword(ctx, field)
			case "CreatedAt":
				return ec.fieldContext_RecentSearch_CreatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RecentSearch", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_recentSearches_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__service(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__service(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sdl":
				return ec.fieldContext__Service_sdl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _Service", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RecentSearch_ID(ctx context.Context, field graphql.CollectedField, obj *model.RecentSearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RecentSearch_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RecentSearch_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RecentSearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RecentSearch_UserID(ctx context.Context, field graphql.CollectedField, obj *model.RecentSearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RecentSearch_UserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RecentSearch_UserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RecentSearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RecentSearch_SearchKeyword(ctx context.Context, field graphql.CollectedField, obj *model.RecentSearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RecentSearch_SearchKeyword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SearchKeyword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RecentSearch_SearchKeyword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RecentSearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RecentSearch_CreatedAt(ctx context.Context, field graphql.CollectedField, obj *model.RecentSearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RecentSearch_CreatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RecentSearch_CreatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RecentSearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingProduct_ProductID(ctx context.Context, field graphql.CollectedField, obj *model.TrendingProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingProduct_ProductID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingProduct_ProductID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingProduct_OrderCount(ctx context.Context, field graphql.CollectedField, obj *model.TrendingProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingProduct_OrderCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingProduct_OrderCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingProduct_Quantity(ctx context.Context, field graphql.CollectedField, obj *model.TrendingProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingProduct_Quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingProduct_Quantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnitOfMeasure_Qty(ctx context.Context, field graphql.CollectedField, obj *model.UnitOfMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnitOfMeasure_Qty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnitOfMeasure_Qty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnitOfMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UnitOfMeasure_Unit(ctx context.Context, field graphql.CollectedField, obj *model.UnitOfMeasure) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UnitOfMeasure_Unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UnitOfMeasure_Unit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UnitOfMeasure",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserProductFavorite_ID(ctx context.Context, field graphql.CollectedField, obj *model.UserProductFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserProductFavorite_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserProductFavorite_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserProductFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserProductFavorite_UserID(ctx context.Context, field graphql.CollectedField, obj *model.UserProductFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserProductFavorite_UserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserProductFavorite_UserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserProductFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserProductFavorite_ProductID(ctx context.Context, field graphql.CollectedField, obj *model.UserProductFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserProductFavorite_ProductID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserProductFavorite_ProductID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserProductFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserProductFavorite_CreatedAt(ctx context.Context, field graphql.CollectedField, obj *model.UserProductFavorite) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserProductFavorite_CreatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserProductFavorite_CreatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserProductFavorite",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workflow_RejectionReasons(ctx context.Context, field graphql.CollectedField, obj *model.Workflow) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workflow_RejectionReasons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectionReasons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workflow_RejectionReasons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workflow",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__Service_sdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__Service_sdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var categoryItemsImplementors = []string{"CategoryItems"}

func (ec *executionContext) _CategoryItems(ctx context.Context, sel ast.SelectionSet, obj *model.CategoryItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryItems")
		case "ID":

			out.Values[i] = ec._CategoryItems_ID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Name":

			out.Values[i] = ec._CategoryItems_Name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Description":

			out.Values[i] = ec._CategoryItems_Description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ListOrder":

			out.Values[i] = ec._CategoryItems_ListOrder(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Active":

			out.Values[i] = ec._CategoryItems_Active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ParentID":

			out.Values[i] = ec._CategoryItems_ParentID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ChildCount":

			out.Values[i] = ec._CategoryItems_ChildCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Xp":

			out.Values[i] = ec._CategoryItems_Xp(ctx, field, obj)

		case "ChildData":

			out.Values[i] = ec._CategoryItems_ChildData(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoryMetaImplementors = []string{"CategoryMeta"}

func (ec *executionContext) _CategoryMeta(ctx context.Context, sel ast.SelectionSet, obj *model.CategoryMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryMetaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryMeta")
		case "Page":

			out.Values[i] = ec._CategoryMeta_Page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PageSize":

			out.Values[i] = ec._CategoryMeta_PageSize(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "TotalCount":

			out.Values[i] = ec._CategoryMeta_TotalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "TotalPages":

			out.Values[i] = ec._CategoryMeta_TotalPages(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ItemRange":

			out.Values[i] = ec._CategoryMeta_ItemRange(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "NextPageKey":

			out.Values[i] = ec._CategoryMeta_NextPageKey(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoryResponseImplementors = []string{"CategoryResponse"}

func (ec *executionContext) _CategoryResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CategoryResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryResponse")
		case "Meta":

			out.Values[i] = ec._CategoryResponse_Meta(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Items":

			out.Values[i] = ec._CategoryResponse_Items(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var draftImplementors = []string{"Draft"}

func (ec *executionContext) _Draft(ctx context.Context, sel ast.SelectionSet, obj *model.Draft) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, draftImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Draft")
		case "ID":

			out.Values[i] = ec._Draft_ID(ctx, field, obj)

		case "Status":

			out.Values[i] = ec._Draft_Status(ctx, field, obj)

		case "RejectionReason":

			out.Values[i] = ec._Draft_RejectionReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getBuySkuImplementors = []string{"GetBuySku"}

func (ec *executionContext) _GetBuySku(ctx context.Context, sel ast.SelectionSet, obj *model.GetBuySku) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBuySkuImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetBuySku")
		case "SKU":

			out.Values[i] = ec._GetBuySku_SKU(ctx, field, obj)

		case "Qty":

			out.Values[i] = ec._GetBuySku_Qty(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var inventoryImplementors = []string{"Inventory"}

func (ec *executionContext) _Inventory(ctx context.Context, sel ast.SelectionSet, obj *model.Inventory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inventoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Inventory")
		case "Enabled":

			out.Values[i] = ec._Inventory_Enabled(ctx, field, obj)

		case "NotificationPoint":

			out.Values[i] = ec._Inventory_NotificationPoint(ctx, field, obj)

		case "VariantLevelTracking":

			out.Values[i] = ec._Inventory_VariantLevelTracking(ctx, field, obj)

		case "OrderCanExceed":

			out.Values[i] = ec._Inventory_OrderCanExceed(ctx, field, obj)

		case "QuantityAvailable":

			out.Values[i] = ec._Inventory_QuantityAvailable(ctx, field, obj)

		case "LastUpdated":

			out.Values[i] = ec._Inventory_LastUpdated(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var latestProductItemsImplementors = []string{"LatestProductItems"}

func (ec *executionContext) _LatestProductItems(ctx context.Context, sel ast.SelectionSet, obj *model.LatestProductItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, latestProductItemsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LatestProductItems")
		case "Draft":

			out.Values[i] = ec._LatestProductItems_Draft(ctx, field, obj)

		case "Id":

			out.Values[i] = ec._LatestProductItems_Id(ctx, field, obj)

		case "Variants":

			out.Values[i] = ec._LatestProductItems_Variants(ctx, field, obj)

		case "Specs":

			out.Values[i] = ec._LatestProductItems_Specs(ctx, field, obj)

		case "PriceSchedule":

			out.Values[i] = ec._LatestProductItems_PriceSchedule(ctx, field, obj)

		case "Product":

			out.Values[i] = ec._LatestProductItems_Product(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "favoriteProduct":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_favoriteProduct(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newProductPriceScheduleImplementors = []string{"NewProductPriceSchedule"}

func (ec *executionContext) _NewProductPriceSchedule(ctx context.Context, sel ast.SelectionSet, obj *model.NewProductPriceSchedule) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newProductPriceScheduleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewProductPriceSchedule")
		case "OwnerID":

			out.Values[i] = ec._NewProductPriceSchedule_OwnerID(ctx, field, obj)

		case "ID":

			out.Values[i] = ec._NewProductPriceSchedule_ID(ctx, field, obj)

		case "Name":

			out.Values[i] = ec._NewProductPriceSchedule_Name(ctx, field, obj)

		case "ApplyTax":

			out.Values[i] = ec._NewProductPriceSchedule_ApplyTax(ctx, field, obj)

		case "ApplyShipping":

			out.Values[i] = ec._NewProductPriceSchedule_ApplyShipping(ctx, field, obj)

		case "MinQuantity":

			out.Values[i] = ec._NewProductPriceSchedule_MinQuantity(ctx, field, obj)

		case "MaxQuantity":

			out.Values[i] = ec._NewProductPriceSchedule_MaxQuantity(ctx, field, obj)

		case "UseCumulativeQuantity":

			out.Values[i] = ec._NewProductPriceSchedule_UseCumulativeQuantity(ctx, field, obj)

		case "RestrictedQuantity":

			out.Values[i] = ec._NewProductPriceSchedule_RestrictedQuantity(ctx, field, obj)

		case "Currency":

			out.Values[i] = ec._NewProductPriceSchedule_Currency(ctx, field, obj)

		case "SaleStart":

			out.Values[i] = ec._NewProductPriceSchedule_SaleStart(ctx, field, obj)

		case "SaleEnd":

			out.Values[i] = ec._NewProductPriceSchedule_SaleEnd(ctx, field, obj)

		case "IsOnSale":

			out.Values[i] = ec._NewProductPriceSchedule_IsOnSale(ctx, field, obj)

		case "PriceBreaks":

			out.Values[i] = ec._NewProductPriceSchedule_PriceBreaks(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderCloudMetaImplementors = []string{"OrderCloudMeta"}

func (ec *executionContext) _OrderCloudMeta(ctx context.Context, sel ast.SelectionSet, obj *model.OrderCloudMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderCloudMetaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderCloudMeta")
		case "Page":

			out.Values[i] = ec._OrderCloudMeta_Page(ctx, field, obj)

		case "PageSize":

			out.Values[i] = ec._OrderCloudMeta_PageSize(ctx, field, obj)

		case "TotalCount":

			out.Values[i] = ec._OrderCloudMeta_TotalCount(ctx, field, obj)

		case "TotalPages":

			out.Values[i] = ec._OrderCloudMeta_TotalPages(ctx, field, obj)

		case "ItemRange":

			out.Values[i] = ec._OrderCloudMeta_ItemRange(ctx, field, obj)

		case "NextPageKey":

			out.Values[i] = ec._OrderCloudMeta_NextPageKey(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priceBreakImplementors = []string{"PriceBreak"}

func (ec *executionContext) _PriceBreak(ctx context.Context, sel ast.SelectionSet, obj *model.PriceBreak) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priceBreakImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriceBreak")
		case "Quantity":

			out.Values[i] = ec._PriceBreak_Quantity(ctx, field, obj)

		case "Price":

			out.Values[i] = ec._PriceBreak_Price(ctx, field, obj)

		case "SalePrice":

			out.Values[i] = ec._PriceBreak_SalePrice(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priceScheduleItemImplementors = []string{"PriceScheduleItem"}

func (ec *executionContext) _PriceScheduleItem(ctx context.Context, sel ast.SelectionSet, obj *model.PriceScheduleItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priceScheduleItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriceScheduleItem")
		case "OwnerID":

			out.Values[i] = ec._PriceScheduleItem_OwnerID(ctx, field, obj)

		case "ID":

			out.Values[i] = ec._PriceScheduleItem_ID(ctx, field, obj)

		case "Name":

			out.Values[i] = ec._PriceScheduleItem_Name(ctx, field, obj)

		case "ApplyTax":

			out.Values[i] = ec._PriceScheduleItem_ApplyTax(ctx, field, obj)

		case "ApplyShipping":

			out.Values[i] = ec._PriceScheduleItem_ApplyShipping(ctx, field, obj)

		case "MinQuantity":

			out.Values[i] = ec._PriceScheduleItem_MinQuantity(ctx, field, obj)

		case "MaxQuantity":

			out.Values[i] = ec._PriceScheduleItem_MaxQuantity(ctx, field, obj)

		case "UseCumulativeQuantity":

			out.Values[i] = ec._PriceScheduleItem_UseCumulativeQuantity(ctx, field, obj)

		case "RestrictedQuantity":

			out.Values[i] = ec._PriceScheduleItem_RestrictedQuantity(ctx, field, obj)

		case "PriceBreaks":

			out.Values[i] = ec._PriceScheduleItem_PriceBreaks(ctx, field, obj)

		case "Currency":

			out.Values[i] = ec._PriceScheduleItem_Currency(ctx, field, obj)

		case "SaleStart":

			out.Values[i] = ec._PriceScheduleItem_SaleStart(ctx, field, obj)

		case "SaleEnd":

			out.Values[i] = ec._PriceScheduleItem_SaleEnd(ctx, field, obj)

		case "IsOnSale":

			out.Values[i] = ec._PriceScheduleItem_IsOnSale(ctx, field, obj)

		case "XP":

			out.Values[i] = ec._PriceScheduleItem_XP(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priceScheduleResponseImplementors = []string{"PriceScheduleResponse"}

func (ec *executionContext) _PriceScheduleResponse(ctx context.Context, sel ast.SelectionSet, obj *model.PriceScheduleResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priceScheduleResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriceScheduleResponse")
		case "Meta":

			out.Values[i] = ec._PriceScheduleResponse_Meta(ctx, field, obj)

		case "Items":

			out.Values[i] = ec._PriceScheduleResponse_Items(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priceScheduleXPImplementors = []string{"PriceScheduleXP"}

func (ec *executionContext) _PriceScheduleXP(ctx context.Context, sel ast.SelectionSet, obj *model.PriceScheduleXp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priceScheduleXPImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriceScheduleXP")
		case "Type":

			out.Values[i] = ec._PriceScheduleXP_Type(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productBatchImplementors = []string{"ProductBatch"}

func (ec *executionContext) _ProductBatch(ctx context.Context, sel ast.SelectionSet, obj *model.ProductBatch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productBatchImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductBatch")
		case "BatchNumber":

			out.Values[i] = ec._ProductBatch_BatchNumber(ctx, field, obj)

		case "BatchExpirationDate":

			out.Values[i] = ec._ProductBatch_BatchExpirationDate(ctx, field, obj)

		case "BatchStockQuantity":

			out.Values[i] = ec._ProductBatch_BatchStockQuantity(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productDocumentImplementors = []string{"ProductDocument"}

func (ec *executionContext) _ProductDocument(ctx context.Context, sel ast.SelectionSet, obj *model.ProductDocument) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productDocumentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductDocument")
		case "FileName":

			out.Values[i] = ec._ProductDocument_FileName(ctx, field, obj)

		case "Url":

			out.Values[i] = ec._ProductDocument_Url(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productFacetImplementors = []string{"ProductFacet"}

func (ec *executionContext) _ProductFacet(ctx context.Context, sel ast.SelectionSet, obj *model.ProductFacet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productFacetImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductFacet")
		case "Supplier":

			out.Values[i] = ec._ProductFacet_Supplier(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productFilterImplementors = []string{"ProductFilter"}

func (ec *executionContext) _ProductFilter(ctx context.Context, sel ast.SelectionSet, obj *model.ProductFilter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productFilterImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductFilter")
		case "filterKey":

			out.Values[i] = ec._ProductFilter_filterKey(ctx, field, obj)

		case "filterCount":

			out.Values[i] = ec._ProductFilter_filterCount(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productImageImplementors = []string{"ProductImage"}

func (ec *executionContext) _ProductImage(ctx context.Context, sel ast.SelectionSet, obj *model.ProductImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productImageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductImage")
		case "ThumbnailUrl":

			out.Values[i] = ec._ProductImage_ThumbnailUrl(ctx, field, obj)

		case "Url":

			out.Values[i] = ec._ProductImage_Url(ctx, field, obj)

		case "Tags":

			out.Values[i] = ec._ProductImage_Tags(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productItemImplementors = []string{"ProductItem"}

func (ec *executionContext) _ProductItem(ctx context.Context, sel ast.SelectionSet, obj *model.ProductItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductItem")
		case "OwnerID":

			out.Values[i] = ec._ProductItem_OwnerID(ctx, field, obj)

		case "DefaultPriceScheduleID":

			out.Values[i] = ec._ProductItem_DefaultPriceScheduleID(ctx, field, obj)

		case "AutoForward":

			out.Values[i] = ec._ProductItem_AutoForward(ctx, field, obj)

		case "ID":

			out.Values[i] = ec._ProductItem_ID(ctx, field, obj)

		case "Name":

			out.Values[i] = ec._ProductItem_Name(ctx, field, obj)

		case "Description":

			out.Values[i] = ec._ProductItem_Description(ctx, field, obj)

		case "QuantityMultiplier":

			out.Values[i] = ec._ProductItem_QuantityMultiplier(ctx, field, obj)

		case "ShipWeight":

			out.Values[i] = ec._ProductItem_ShipWeight(ctx, field, obj)

		case "ShipHeight":

			out.Values[i] = ec._ProductItem_ShipHeight(ctx, field, obj)

		case "ShipWidth":

			out.Values[i] = ec._ProductItem_ShipWidth(ctx, field, obj)

		case "ShipLength":

			out.Values[i] = ec._ProductItem_ShipLength(ctx, field, obj)

		case "Active":

			out.Values[i] = ec._ProductItem_Active(ctx, field, obj)

		case "SpecCount":

			out.Values[i] = ec._ProductItem_SpecCount(ctx, field, obj)

		case "VariantCount":

			out.Values[i] = ec._ProductItem_VariantCount(ctx, field, obj)

		case "ShipFromAddressID":

			out.Values[i] = ec._ProductItem_ShipFromAddressID(ctx, field, obj)

		case "Inventory":

			out.Values[i] = ec._ProductItem_Inventory(ctx, field, obj)

		case "DefaultSupplierID":

			out.Values[i] = ec._ProductItem_DefaultSupplierID(ctx, field, obj)

		case "AllSuppliersCanSell":

			out.Values[i] = ec._ProductItem_AllSuppliersCanSell(ctx, field, obj)

		case "Returnable":

			out.Values[i] = ec._ProductItem_Returnable(ctx, field, obj)

		case "XP":

			out.Values[i] = ec._ProductItem_XP(ctx, field, obj)

		case "IsFavorite":

			out.Values[i] = ec._ProductItem_IsFavorite(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PriceSchedule":

			out.Values[i] = ec._ProductItem_PriceSchedule(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productMetaImplementors = []string{"ProductMeta"}

func (ec *executionContext) _ProductMeta(ctx context.Context, sel ast.SelectionSet, obj *model.ProductMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productMetaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductMeta")
		case "Facets":

			out.Values[i] = ec._ProductMeta_Facets(ctx, field, obj)

		case "Page":

			out.Values[i] = ec._ProductMeta_Page(ctx, field, obj)

		case "PageSize":

			out.Values[i] = ec._ProductMeta_PageSize(ctx, field, obj)

		case "TotalCount":

			out.Values[i] = ec._ProductMeta_TotalCount(ctx, field, obj)

		case "TotalPages":

			out.Values[i] = ec._ProductMeta_TotalPages(ctx, field, obj)

		case "ItemRange":

			out.Values[i] = ec._ProductMeta_ItemRange(ctx, field, obj)

		case "NextPageKey":

			out.Values[i] = ec._ProductMeta_NextPageKey(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productPromotionsImplementors = []string{"ProductPromotions"}

func (ec *executionContext) _ProductPromotions(ctx context.Context, sel ast.SelectionSet, obj *model.ProductPromotions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productPromotionsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductPromotions")
		case "ID":

			out.Values[i] = ec._ProductPromotions_ID(ctx, field, obj)

		case "LineItemLevel":

			out.Values[i] = ec._ProductPromotions_LineItemLevel(ctx, field, obj)

		case "Code":

			out.Values[i] = ec._ProductPromotions_Code(ctx, field, obj)

		case "Name":

			out.Values[i] = ec._ProductPromotions_Name(ctx, field, obj)

		case "RedemptionLimit":

			out.Values[i] = ec._ProductPromotions_RedemptionLimit(ctx, field, obj)

		case "RedemptionLimitPerUser":

			out.Values[i] = ec._ProductPromotions_RedemptionLimitPerUser(ctx, field, obj)

		case "RedemptionCount":

			out.Values[i] = ec._ProductPromotions_RedemptionCount(ctx, field, obj)

		case "Description":

			out.Values[i] = ec._ProductPromotions_Description(ctx, field, obj)

		case "FinePrint":

			out.Values[i] = ec._ProductPromotions_FinePrint(ctx, field, obj)

		case "StartDate":

			out.Values[i] = ec._ProductPromotions_StartDate(ctx, field, obj)

		case "ExpirationDate":

			out.Values[i] = ec._ProductPromotions_ExpirationDate(ctx, field, obj)

		case "EligibleExpression":

			out.Values[i] = ec._ProductPromotions_EligibleExpression(ctx, field, obj)

		case "ValueExpression":

			out.Values[i] = ec._ProductPromotions_ValueExpression(ctx, field, obj)

		case "CanCombine":

			out.Values[i] = ec._ProductPromotions_CanCombine(ctx, field, obj)

		case "AllowAllBuyers":

			out.Values[i] = ec._ProductPromotions_AllowAllBuyers(ctx, field, obj)

		case "OwnerID":

			out.Values[i] = ec._ProductPromotions_OwnerID(ctx, field, obj)

		case "xp":

			out.Values[i] = ec._ProductPromotions_xp(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productPromotionsXpImplementors = []string{"ProductPromotionsXp"}

func (ec *executionContext) _ProductPromotionsXp(ctx context.Context, sel ast.SelectionSet, obj *model.ProductPromotionsXp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productPromotionsXpImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductPromotionsXp")
		case "Type":

			out.Values[i] = ec._ProductPromotionsXp_Type(ctx, field, obj)

		case "Value":

			out.Values[i] = ec._ProductPromotionsXp_Value(ctx, field, obj)

		case "AppliesTo":

			out.Values[i] = ec._ProductPromotionsXp_AppliesTo(ctx, field, obj)

		case "ScopeToSupplier":

			out.Values[i] = ec._ProductPromotionsXp_ScopeToSupplier(ctx, field, obj)

		case "Supplier":

			out.Values[i] = ec._ProductPromotionsXp_Supplier(ctx, field, obj)

		case "Automatic":

			out.Values[i] = ec._ProductPromotionsXp_Automatic(ctx, field, obj)

		case "MaxShipCost":

			out.Values[i] = ec._ProductPromotionsXp_MaxShipCost(ctx, field, obj)

		case "Buyers":

			out.Values[i] = ec._ProductPromotionsXp_Buyers(ctx, field, obj)

		case "BOGO":

			out.Values[i] = ec._ProductPromotionsXp_BOGO(ctx, field, obj)

		case "MinReq":

			out.Values[i] = ec._ProductPromotionsXp_MinReq(ctx, field, obj)

		case "SKUs":

			out.Values[i] = ec._ProductPromotionsXp_SKUs(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productPromotionsXpBogoImplementors = []string{"ProductPromotionsXpBogo"}

func (ec *executionContext) _ProductPromotionsXpBogo(ctx context.Context, sel ast.SelectionSet, obj *model.ProductPromotionsXpBogo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productPromotionsXpBogoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductPromotionsXpBogo")
		case "Type":

			out.Values[i] = ec._ProductPromotionsXpBogo_Type(ctx, field, obj)

		case "Value":

			out.Values[i] = ec._ProductPromotionsXpBogo_Value(ctx, field, obj)

		case "GetSKU":

			out.Values[i] = ec._ProductPromotionsXpBogo_GetSKU(ctx, field, obj)

		case "BuySKU":

			out.Values[i] = ec._ProductPromotionsXpBogo_BuySKU(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productPromotionsXpMinReqImplementors = []string{"ProductPromotionsXpMinReq"}

func (ec *executionContext) _ProductPromotionsXpMinReq(ctx context.Context, sel ast.SelectionSet, obj *model.ProductPromotionsXpMinReq) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productPromotionsXpMinReqImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductPromotionsXpMinReq")
		case "Type":

			out.Values[i] = ec._ProductPromotionsXpMinReq_Type(ctx, field, obj)

		case "Int":

			out.Values[i] = ec._ProductPromotionsXpMinReq_Int(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productResponseImplementors = []string{"ProductResponse"}

func (ec *executionContext) _ProductResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ProductResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductResponse")
		case "Meta":

			out.Values[i] = ec._ProductResponse_Meta(ctx, field, obj)

		case "Items":

			out.Values[i] = ec._ProductResponse_Items(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productResponseV2Implementors = []string{"ProductResponseV2"}

func (ec *executionContext) _ProductResponseV2(ctx context.Context, sel ast.SelectionSet, obj *model.ProductResponseV2) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productResponseV2Implementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductResponseV2")
		case "Meta":

			out.Values[i] = ec._ProductResponseV2_Meta(ctx, field, obj)

		case "Items":

			out.Values[i] = ec._ProductResponseV2_Items(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productTaxImplementors = []string{"ProductTax"}

func (ec *executionContext) _ProductTax(ctx context.Context, sel ast.SelectionSet, obj *model.ProductTax) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productTaxImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductTax")
		case "Description":

			out.Values[i] = ec._ProductTax_Description(ctx, field, obj)

		case "LongDescription":

			out.Values[i] = ec._ProductTax_LongDescription(ctx, field, obj)

		case "Code":

			out.Values[i] = ec._ProductTax_Code(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productXPImplementors = []string{"ProductXP"}

func (ec *executionContext) _ProductXP(ctx context.Context, sel ast.SelectionSet, obj *model.ProductXp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productXPImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductXP")
		case "Company":

			out.Values[i] = ec._ProductXP_Company(ctx, field, obj)

		case "Status":

			out.Values[i] = ec._ProductXP_Status(ctx, field, obj)

		case "ArtworkRequired":

			out.Values[i] = ec._ProductXP_ArtworkRequired(ctx, field, obj)

		case "ProductRegistrationNumber":

			out.Values[i] = ec._ProductXP_ProductRegistrationNumber(ctx, field, obj)

		case "Facets":

			out.Values[i] = ec._ProductXP_Facets(ctx, field, obj)

		case "Manufacturer":

			out.Values[i] = ec._ProductXP_Manufacturer(ctx, field, obj)

		case "FreeShipping":

			out.Values[i] = ec._ProductXP_FreeShipping(ctx, field, obj)

		case "UnitOfMeasure":

			out.Values[i] = ec._ProductXP_UnitOfMeasure(ctx, field, obj)

		case "Images":

			out.Values[i] = ec._ProductXP_Images(ctx, field, obj)

		case "ProductType":

			out.Values[i] = ec._ProductXP_ProductType(ctx, field, obj)

		case "CountryOfOrigin":

			out.Values[i] = ec._ProductXP_CountryOfOrigin(ctx, field, obj)

		case "PromotionEligible":

			out.Values[i] = ec._ProductXP_PromotionEligible(ctx, field, obj)

		case "PromotionExists":

			out.Values[i] = ec._ProductXP_PromotionExists(ctx, field, obj)

		case "Workflow":

			out.Values[i] = ec._ProductXP_Workflow(ctx, field, obj)

		case "ProductBatch":

			out.Values[i] = ec._ProductXP_ProductBatch(ctx, field, obj)

		case "Tax":

			out.Values[i] = ec._ProductXP_Tax(ctx, field, obj)

		case "TherapeuticClass":

			out.Values[i] = ec._ProductXP_TherapeuticClass(ctx, field, obj)

		case "HasVariants":

			out.Values[i] = ec._ProductXP_HasVariants(ctx, field, obj)

		case "Accessorials":

			out.Values[i] = ec._ProductXP_Accessorials(ctx, field, obj)

		case "FreeShippingMessage":

			out.Values[i] = ec._ProductXP_FreeShippingMessage(ctx, field, obj)

		case "IsResale":

			out.Values[i] = ec._ProductXP_IsResale(ctx, field, obj)

		case "Brand":

			out.Values[i] = ec._ProductXP_Brand(ctx, field, obj)

		case "CustomerRating":

			out.Values[i] = ec._ProductXP_CustomerRating(ctx, field, obj)

		case "SizeTier":

			out.Values[i] = ec._ProductXP_SizeTier(ctx, field, obj)

		case "IntegrationData":

			out.Values[i] = ec._ProductXP_IntegrationData(ctx, field, obj)

		case "Notes":

			out.Values[i] = ec._ProductXP_Notes(ctx, field, obj)

		case "Currency":

			out.Values[i] = ec._ProductXP_Currency(ctx, field, obj)

		case "Documents":

			out.Values[i] = ec._ProductXP_Documents(ctx, field, obj)

		case "Promotions":

			out.Values[i] = ec._ProductXP_Promotions(ctx, field, obj)

		case "SupplierImage":

			out.Values[i] = ec._ProductXP_SupplierImage(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "productsV2":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_productsV2(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "products":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_products(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "similarProducts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_similarProducts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "recommendProducts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recommendProducts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "product":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_product(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "productV2":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_productV2(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "priceSchedules":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_priceSchedules(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "categories":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_categories(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "trendingProducts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trendingProducts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getProductFilter":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProductFilter(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "recentSearches":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recentSearches(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "_service":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recentSearchImplementors = []string{"RecentSearch"}

func (ec *executionContext) _RecentSearch(ctx context.Context, sel ast.SelectionSet, obj *model.RecentSearch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recentSearchImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecentSearch")
		case "ID":

			out.Values[i] = ec._RecentSearch_ID(ctx, field, obj)

		case "UserID":

			out.Values[i] = ec._RecentSearch_UserID(ctx, field, obj)

		case "SearchKeyword":

			out.Values[i] = ec._RecentSearch_SearchKeyword(ctx, field, obj)

		case "CreatedAt":

			out.Values[i] = ec._RecentSearch_CreatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendingProductImplementors = []string{"TrendingProduct"}

func (ec *executionContext) _TrendingProduct(ctx context.Context, sel ast.SelectionSet, obj *model.TrendingProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendingProductImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendingProduct")
		case "ProductID":

			out.Values[i] = ec._TrendingProduct_ProductID(ctx, field, obj)

		case "OrderCount":

			out.Values[i] = ec._TrendingProduct_OrderCount(ctx, field, obj)

		case "Quantity":

			out.Values[i] = ec._TrendingProduct_Quantity(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var unitOfMeasureImplementors = []string{"UnitOfMeasure"}

func (ec *executionContext) _UnitOfMeasure(ctx context.Context, sel ast.SelectionSet, obj *model.UnitOfMeasure) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, unitOfMeasureImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UnitOfMeasure")
		case "Qty":

			out.Values[i] = ec._UnitOfMeasure_Qty(ctx, field, obj)

		case "Unit":

			out.Values[i] = ec._UnitOfMeasure_Unit(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userProductFavoriteImplementors = []string{"UserProductFavorite"}

func (ec *executionContext) _UserProductFavorite(ctx context.Context, sel ast.SelectionSet, obj *model.UserProductFavorite) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userProductFavoriteImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserProductFavorite")
		case "ID":

			out.Values[i] = ec._UserProductFavorite_ID(ctx, field, obj)

		case "UserID":

			out.Values[i] = ec._UserProductFavorite_UserID(ctx, field, obj)

		case "ProductID":

			out.Values[i] = ec._UserProductFavorite_ProductID(ctx, field, obj)

		case "CreatedAt":

			out.Values[i] = ec._UserProductFavorite_CreatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var workflowImplementors = []string{"Workflow"}

func (ec *executionContext) _Workflow(ctx context.Context, sel ast.SelectionSet, obj *model.Workflow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workflowImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Workflow")
		case "RejectionReasons":

			out.Values[i] = ec._Workflow_RejectionReasons(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":

			out.Values[i] = ec.__Service_sdl(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCategoryItems2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐCategoryItemsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CategoryItems) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCategoryItems2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐCategoryItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCategoryItems2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐCategoryItems(ctx context.Context, sel ast.SelectionSet, v *model.CategoryItems) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CategoryItems(ctx, sel, v)
}

func (ec *executionContext) marshalNCategoryMeta2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐCategoryMeta(ctx context.Context, sel ast.SelectionSet, v *model.CategoryMeta) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CategoryMeta(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCategoryResponse2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐCategoryResponse(ctx context.Context, sel ast.SelectionSet, v *model.CategoryResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CategoryResponse(ctx, sel, v)
}

func (ec *executionContext) marshalODraft2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐDraft(ctx context.Context, sel ast.SelectionSet, v *model.Draft) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Draft(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGetBuySku2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐGetBuySku(ctx context.Context, sel ast.SelectionSet, v *model.GetBuySku) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetBuySku(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOInventory2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐInventory(ctx context.Context, sel ast.SelectionSet, v *model.Inventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Inventory(ctx, sel, v)
}

func (ec *executionContext) marshalOLatestProductItems2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐLatestProductItems(ctx context.Context, sel ast.SelectionSet, v []*model.LatestProductItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLatestProductItems2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐLatestProductItems(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLatestProductItems2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐLatestProductItems(ctx context.Context, sel ast.SelectionSet, v *model.LatestProductItems) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LatestProductItems(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	return res
}

func (ec *executionContext) marshalONewProductPriceSchedule2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐNewProductPriceSchedule(ctx context.Context, sel ast.SelectionSet, v *model.NewProductPriceSchedule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NewProductPriceSchedule(ctx, sel, v)
}

func (ec *executionContext) marshalOOrderCloudMeta2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐOrderCloudMeta(ctx context.Context, sel ast.SelectionSet, v *model.OrderCloudMeta) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrderCloudMeta(ctx, sel, v)
}

func (ec *executionContext) marshalOPriceBreak2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceBreak(ctx context.Context, sel ast.SelectionSet, v []*model.PriceBreak) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPriceBreak2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceBreak(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPriceBreak2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceBreak(ctx context.Context, sel ast.SelectionSet, v *model.PriceBreak) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PriceBreak(ctx, sel, v)
}

func (ec *executionContext) marshalOPriceScheduleItem2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceScheduleItem(ctx context.Context, sel ast.SelectionSet, v []*model.PriceScheduleItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPriceScheduleItem2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceScheduleItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPriceScheduleItem2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceScheduleItem(ctx context.Context, sel ast.SelectionSet, v *model.PriceScheduleItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PriceScheduleItem(ctx, sel, v)
}

func (ec *executionContext) marshalOPriceScheduleResponse2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceScheduleResponse(ctx context.Context, sel ast.SelectionSet, v *model.PriceScheduleResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PriceScheduleResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOPriceScheduleXP2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐPriceScheduleXp(ctx context.Context, sel ast.SelectionSet, v *model.PriceScheduleXp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PriceScheduleXP(ctx, sel, v)
}

func (ec *executionContext) marshalOProductBatch2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductBatch(ctx context.Context, sel ast.SelectionSet, v *model.ProductBatch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductBatch(ctx, sel, v)
}

func (ec *executionContext) marshalOProductDocument2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductDocument(ctx context.Context, sel ast.SelectionSet, v []*model.ProductDocument) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductDocument2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProductDocument2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductDocument(ctx context.Context, sel ast.SelectionSet, v *model.ProductDocument) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductDocument(ctx, sel, v)
}

func (ec *executionContext) marshalOProductFacet2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductFacet(ctx context.Context, sel ast.SelectionSet, v *model.ProductFacet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductFacet(ctx, sel, v)
}

func (ec *executionContext) marshalOProductFilter2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductFilter(ctx context.Context, sel ast.SelectionSet, v []*model.ProductFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductFilter2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProductFilter2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductFilter(ctx context.Context, sel ast.SelectionSet, v *model.ProductFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductFilter(ctx, sel, v)
}

func (ec *executionContext) marshalOProductImage2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductImage(ctx context.Context, sel ast.SelectionSet, v []*model.ProductImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductImage2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProductImage2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductImage(ctx context.Context, sel ast.SelectionSet, v *model.ProductImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductImage(ctx, sel, v)
}

func (ec *executionContext) marshalOProductItem2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductItem(ctx context.Context, sel ast.SelectionSet, v []*model.ProductItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductItem2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProductItem2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductItem(ctx context.Context, sel ast.SelectionSet, v *model.ProductItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductItem(ctx, sel, v)
}

func (ec *executionContext) marshalOProductMeta2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductMeta(ctx context.Context, sel ast.SelectionSet, v *model.ProductMeta) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductMeta(ctx, sel, v)
}

func (ec *executionContext) marshalOProductPromotions2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotions(ctx context.Context, sel ast.SelectionSet, v []*model.ProductPromotions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProductPromotions2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotions(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProductPromotions2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotions(ctx context.Context, sel ast.SelectionSet, v *model.ProductPromotions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductPromotions(ctx, sel, v)
}

func (ec *executionContext) marshalOProductPromotionsXp2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotionsXp(ctx context.Context, sel ast.SelectionSet, v *model.ProductPromotionsXp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductPromotionsXp(ctx, sel, v)
}

func (ec *executionContext) marshalOProductPromotionsXpBogo2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotionsXpBogo(ctx context.Context, sel ast.SelectionSet, v *model.ProductPromotionsXpBogo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductPromotionsXpBogo(ctx, sel, v)
}

func (ec *executionContext) marshalOProductPromotionsXpMinReq2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductPromotionsXpMinReq(ctx context.Context, sel ast.SelectionSet, v *model.ProductPromotionsXpMinReq) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductPromotionsXpMinReq(ctx, sel, v)
}

func (ec *executionContext) marshalOProductResponse2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductResponse(ctx context.Context, sel ast.SelectionSet, v *model.ProductResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOProductResponseV22ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductResponseV2(ctx context.Context, sel ast.SelectionSet, v *model.ProductResponseV2) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductResponseV2(ctx, sel, v)
}

func (ec *executionContext) marshalOProductTax2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductTax(ctx context.Context, sel ast.SelectionSet, v *model.ProductTax) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductTax(ctx, sel, v)
}

func (ec *executionContext) marshalOProductXP2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐProductXp(ctx context.Context, sel ast.SelectionSet, v *model.ProductXp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProductXP(ctx, sel, v)
}

func (ec *executionContext) marshalORecentSearch2ᚕᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐRecentSearch(ctx context.Context, sel ast.SelectionSet, v []*model.RecentSearch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecentSearch2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐRecentSearch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORecentSearch2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐRecentSearch(ctx context.Context, sel ast.SelectionSet, v *model.RecentSearch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecentSearch(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOUnitOfMeasure2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐUnitOfMeasure(ctx context.Context, sel ast.SelectionSet, v *model.UnitOfMeasure) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UnitOfMeasure(ctx, sel, v)
}

func (ec *executionContext) marshalOUserProductFavorite2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐUserProductFavorite(ctx context.Context, sel ast.SelectionSet, v *model.UserProductFavorite) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserProductFavorite(ctx, sel, v)
}

func (ec *executionContext) marshalOWorkflow2ᚖmpmyᚑproductᚑserviceᚋgraphᚋmodelᚐWorkflow(ctx context.Context, sel ast.SelectionSet, v *model.Workflow) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Workflow(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
